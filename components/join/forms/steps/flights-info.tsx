import React, { useEffect } from 'react';
import { useFormContext } from 'react-hook-form';
import SubmitBtn from '~/components/shared/buttons/submit-btn';
import cookie from 'js-cookie';
// import CustomInput from '~/components/shared/forms/custom-input';
// import Axios from '~/utils/axios';
// import FlightsSelect from '~/components/shared/select/Flights-select';
// import { useRouter } from 'next/router';
import { Translate, useTranslate } from '~/i18n';
import toast from 'react-hot-toast';
// import classNames from 'classnames';
// import ButtonBtn from '~/components/shared/buttons/button-btn';
// import Image from '~/components/shared/image';
// import Cookies from 'js-cookie';
// import { useAuth } from '~/auth';
import { GuestType } from '~/interfaces/guest';
// import classNames from 'classnames';
import CustomInput from '~/components/shared/forms/custom-input';
import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import CustomDayInput from '~/components/shared/forms/custom-day-input';
import { CalendarIcon } from '@heroicons/react/24/outline';
import { getUnixTime, getYear } from 'date-fns';
// import classNames from 'classnames';
// import { ArrowRightIcon } from '@heroicons/react/20/solid';
import ButtonBtn from '~/components/shared/buttons/button-btn';
import BackBtn from '~/components/shared/buttons/back-btn';
import { zonedTimeToUtc } from 'date-fns-tz';
// import { publicUrl } from '~/utils/publicUrl';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type FlightsInfoProps = {
   onNextClick: () => any;
   onBackClick: () => any;
   onUpdateClick: () => any;
   step: string | undefined;
   showStepSummary?: boolean;
   nextStep: string;
   role?: string;
};

// type Item = {
//    label: string;
//    value: string;
//    code: string;
// };

const FlightsInfo = ({
   onNextClick,
   step,
   onBackClick,
   // onUpdateClick,
   showStepSummary,
   nextStep,
}: FlightsInfoProps) => {
   const { translate } = useTranslate();

   const {
      handleSubmit,
      watch,
      register,
      setValue,
      getValues,
      formState: { errors },
   } = useFormContext<GuestType>();

   const submitForm = async (values: GuestType) => {
      // if (loading) {
      //    return;
      // }

      try {
         const updatedUserObj = {
            ...values,
            step: nextStep,
         };
         // console.log(updatedUserObj, 'updatedUserObj');

         cookie.set('user_data', JSON.stringify(updatedUserObj));
         onNextClick();

         toast.success(translate({ id: 'res:info_saved' }));
         // setLoading(false);
      } catch (error: any) {
         console.log(error, 'error');
         // setLoading(false);
         // if (error.response && error.response.status !== 500 && error.response.status !== 404) {
         //    const responseErrors = error?.response?.data?.error;
         //    responseErrors && toast.error(responseErrors);
         //    toast.error(translate({ id: 'res:500' }));
         // } else {
         //    toast.error(translate({ id: 'res:500' }));
         // }
      }
   };

   // const disabledDays = [{ before: new Date(2023, 5, 15), after: new Date(2023, 5, 18) }];
   // const disabledDays2 = [{ before: new Date(2023, 5, 17), after: new Date(2023, 5, 20) }];
   // useEffect(() => {
   //    // register('Flights_name', { required: translate({ id: 'validation:required' }) });
   // }, [translate, register]);
   useEffect(() => {
      setValue('destination_to', translate({ id: 'web:riyadh' }));
      setValue('departure_city_from', translate({ id: 'web:riyadh' }));
   }, [translate, setValue]);

   const autoFillYes = () => {
      setValue('require_flights', 'yes');
      setValue('destination_from', 'Lisbon');
      setValue('expected_date_of_arrival', '1682888400');
      setValue('specific_requirements_from', 'I need the following: .... 111');
      setValue('departure_city_to', 'Lisbon');
      setValue('expected_date_of_departure', '1682888400');
      setValue('specific_requirements_to', 'I need the following: .... 222');
      setValue('comments', 'comments ...');
      // setValue('full_name_on_document', 'full name');
   };
   return (
      <React.Fragment>
         {step === 'flights-info' ? (
            <div className="rounded-lg border bg-white shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
               <div className="p-6 sm:p-12">
                  <div className=" text-xl font-bold capitalize text-primary md:mb-4 md:text-2xl">
                     <Translate id="web:flights-info" />
                  </div>
                  <div className="pt-5">
                     <form
                        noValidate
                        onSubmit={handleSubmit(submitForm)}
                        className="relative"
                        autoComplete="off">
                        <div>
                           {/* require_flights */}
                           <CustomRadioInput
                              label={translate({ id: 'web:require_flights' })}
                              isRequired={getValues('require_flights') === 'yes'}
                              isInline
                              options={[
                                 { value: 'yes', label: translate({ id: 'web:yes' }) },
                                 { value: 'no', label: translate({ id: 'web:no' }) },
                              ]}
                              id="require_flights"
                              error={errors.require_flights?.message}
                              {...register('require_flights', {
                                 required: translate({ id: 'validation:required' }),
                              })}
                           />
                           <div>
                              {watch('require_flights') !== null ? (
                                 watch('require_flights') === 'yes' ? (
                                    <p className="text-black">
                                       <Translate id="web:require_flights_note_yes" />
                                    </p>
                                 ) : (
                                    <p className="text-black">
                                       <Translate id="web:require_flights_note_no" />
                                    </p>
                                 )
                              ) : (
                                 ''
                              )}
                           </div>
                           <div>
                              {watch('require_flights') !== null ? (
                                 watch('require_flights') === 'yes' ||
                                 watch('require_flights') === 'no' ? (
                                    <React.Fragment>
                                       <h2 className="my-4  text-lg font-bold text-primary">
                                          <Translate id="web:travel_to_saudi" />
                                       </h2>
                                       {/* travel_to_saudi */}
                                       <React.Fragment>
                                          {/* departure_city_to */}
                                          <CustomInput
                                             label={translate({ id: 'web:departure_city_to' })}
                                             type="text"
                                             isRequired={getValues('require_flights') === 'yes'}
                                             isInline
                                             // disabled={!!user && role !== 'co-team-manager'}
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:departure_city_to',
                                             })}
                                             id="departure_city_to"
                                             error={errors.departure_city_to?.message}
                                             {...register('departure_city_to', {
                                                required:
                                                   getValues('require_flights') === 'yes'
                                                      ? translate({
                                                           id: 'validation:required',
                                                        })
                                                      : false,
                                             })}
                                          />
                                          {/* destination_to */}
                                          <CustomInput
                                             label={translate({ id: 'web:destination_to' })}
                                             type="text"
                                             isRequired={getValues('require_flights') === 'yes'}
                                             isInline
                                             readOnly
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:destination_to',
                                             })}
                                             id="destination_to"
                                             error={errors.destination_to?.message}
                                             {...register('destination_to', {
                                                required: translate({
                                                   id: 'validation:required',
                                                }),
                                             })}
                                          />

                                          {/* expected_date_of_arrival */}
                                          <CustomDayInput
                                             label={translate({
                                                id: 'web:expected_date_of_arrival',
                                             })}
                                             type="text"
                                             placeHolder={translate({
                                                id: 'web:expected_date_of_arrival',
                                             })}
                                             id="expected_date_of_arrival"
                                             // defaultSelected={query.date_from?.toString()}
                                             isInline
                                             isRequired={getValues('require_flights') === 'yes'}
                                             fromYear={getYear(new Date())}
                                             toYear={getYear(new Date()) + 1}
                                             fromMonth={new Date()}
                                             // fromMonth={new Date(2023, 5, 1)}
                                             // toMonth={new Date(2023, 5, 30)}
                                             // disabledDays={disabledDays}
                                             {...register('expected_date_of_arrival', {
                                                required:
                                                   getValues('require_flights') === 'yes'
                                                      ? translate({
                                                           id: 'validation:required',
                                                        })
                                                      : false,
                                             })}
                                             append={
                                                <span className="block border-gray-500 px-2 text-gray-500 ltr:border-l rtl:border-r">
                                                   <CalendarIcon className="h-4 w-4" />
                                                </span>
                                             }
                                             value={getValues('expected_date_of_arrival')}
                                             error={errors.expected_date_of_arrival?.message}
                                             callBack={(item: Date) => {
                                                const timestamp = getUnixTime(item);
                                                const saudiArabiaTimestamp =
                                                   zonedTimeToUtc(
                                                      timestamp * 1000,
                                                      'Asia/Riyadh'
                                                   ).getTime() / 1000;
                                                setValue(
                                                   'expected_date_of_arrival',
                                                   saudiArabiaTimestamp.toString(),
                                                   {
                                                      shouldValidate: true,
                                                   }
                                                );
                                             }}
                                          />
                                          {/* specific_requirements_to */}
                                          <CustomInput
                                             label={translate({
                                                id: 'web:specific_requirements_to',
                                             })}
                                             type="textarea"
                                             rows={3}
                                             isInline
                                             // disabled={!!user && role !== 'co-team-manager'}
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:specific_requirements_to',
                                             })}
                                             id="specific_requirements_to"
                                             error={errors.specific_requirements_to?.message}
                                             {...register('specific_requirements_to', {
                                                required: false,
                                                maxLength: {
                                                   value: 500,
                                                   message: translate({
                                                      id: 'validation:you_reached_the_text_limit',
                                                   }),
                                                },
                                             })}
                                          />
                                       </React.Fragment>
                                       <hr className="my-5 border-primary" />
                                       <h2 className="my-4  text-lg font-bold text-primary">
                                          <Translate id="web:travel_from_saudi" />
                                       </h2>
                                       {/* travel_from_saudi */}
                                       <React.Fragment>
                                          {/* departure_city_from */}
                                          <CustomInput
                                             label={translate({ id: 'web:departure_city_from' })}
                                             type="text"
                                             isRequired={getValues('require_flights') === 'yes'}
                                             isInline
                                             readOnly
                                             // disabled={!!user && role !== 'co-team-manager'}
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:departure_city_from',
                                             })}
                                             id="departure_city_from"
                                             error={errors.departure_city_from?.message}
                                             {...register('departure_city_from', {
                                                required:
                                                   getValues('require_flights') === 'yes'
                                                      ? translate({
                                                           id: 'validation:required',
                                                        })
                                                      : false,
                                             })}
                                          />
                                          {/* destination_from */}
                                          <CustomInput
                                             label={translate({ id: 'web:destination_from' })}
                                             type="text"
                                             isRequired={getValues('require_flights') === 'yes'}
                                             isInline
                                             // disabled={!!user && role !== 'co-team-manager'}
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:destination_from',
                                             })}
                                             id="destination_from"
                                             error={errors.destination_from?.message}
                                             {...register('destination_from', {
                                                required:
                                                   getValues('require_flights') === 'yes'
                                                      ? translate({
                                                           id: 'validation:required',
                                                        })
                                                      : false,
                                             })}
                                          />

                                          {/* expected_date_of_departure */}
                                          <CustomDayInput
                                             label={translate({
                                                id: 'web:expected_date_of_departure',
                                             })}
                                             type="text"
                                             placeHolder={translate({
                                                id: 'web:expected_date_of_departure',
                                             })}
                                             id="expected_date_of_departure"
                                             // defaultSelected={query.date_from?.toString()}
                                             isInline
                                             isRequired={getValues('require_flights') === 'yes'}
                                             fromYear={getYear(new Date())}
                                             toYear={getYear(new Date()) + 1}
                                             fromMonth={new Date()}
                                             // disabledDays={disabledDays2}
                                             // fromMonth={new Date(getMonth(new Date()))}
                                             // ToMonth={new Date(getMonth(new Date()))}
                                             {...register('expected_date_of_departure', {
                                                required:
                                                   getValues('require_flights') === 'yes'
                                                      ? translate({
                                                           id: 'validation:required',
                                                        })
                                                      : false,
                                             })}
                                             append={
                                                <span className="block border-gray-500 px-2 text-gray-500 ltr:border-l rtl:border-r">
                                                   <CalendarIcon className="h-4 w-4" />
                                                </span>
                                             }
                                             value={getValues('expected_date_of_departure')}
                                             error={errors.expected_date_of_departure?.message}
                                             callBack={(item: Date) => {
                                                const timestamp = getUnixTime(item);
                                                const saudiArabiaTimestamp =
                                                   zonedTimeToUtc(
                                                      timestamp * 1000,
                                                      'Asia/Riyadh'
                                                   ).getTime() / 1000;
                                                setValue(
                                                   'expected_date_of_departure',
                                                   saudiArabiaTimestamp.toString(),
                                                   {
                                                      shouldValidate: true,
                                                   }
                                                );
                                             }}
                                          />
                                          {/* specific_requirements_from */}
                                          <CustomInput
                                             label={translate({
                                                id: 'web:specific_requirements_from',
                                             })}
                                             type="textarea"
                                             rows={3}
                                             isInline
                                             // disabled={!!user && role !== 'co-team-manager'}
                                             autoComplete="off"
                                             placeHolder={translate({
                                                id: 'web:specific_requirements_from',
                                             })}
                                             id="specific_requirements_from"
                                             error={errors.specific_requirements_from?.message}
                                             {...register('specific_requirements_from', {
                                                required: false,
                                                maxLength: {
                                                   value: 500,
                                                   message: translate({
                                                      id: 'validation:you_reached_the_text_limit',
                                                   }),
                                                },
                                             })}
                                          />
                                       </React.Fragment>
                                       <hr className="my-5 border-primary" />
                                       {/* comments */}
                                       <CustomInput
                                          label={translate({ id: 'web:comments' })}
                                          type="textarea"
                                          rows={5}
                                          isInline
                                          // disabled={!!user && role !== 'co-team-manager'}
                                          autoComplete="off"
                                          placeHolder={translate({
                                             id: 'web:comments',
                                          })}
                                          id="comments"
                                          error={errors.comments?.message}
                                          {...register('comments', {
                                             required: false,
                                             maxLength: {
                                                value: 500,
                                                message: translate({
                                                   id: 'validation:you_reached_the_text_limit',
                                                }),
                                             },
                                          })}
                                       />
                                    </React.Fragment>
                                 ) : (
                                    ''
                                 )
                              ) : (
                                 ''
                              )}
                           </div>
                        </div>
                        <div className="mt-10">
                           {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}
                                       callBack={() => autoFillYes()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill yes'}
                                    />
                                 </div>
                              </div>
                           )}
                           <div className="row">
                              <div className="col-6 sm:col-3 sm:offset-3">
                                 <BackBtn
                                    id="back-btn" //* for test cases
                                    // loading={loading}
                                    callBack={() => {
                                       onBackClick();
                                    }}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:back` })}`}
                                 />
                              </div>
                              <div className="col-6 sm:col-3">
                                 <SubmitBtn
                                    id="submit-btn" //* for test cases
                                    // loading={loading}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:next` })}`}
                                 />
                              </div>
                           </div>
                        </div>
                     </form>
                  </div>
               </div>
            </div>
         ) : (
            ''
         )}
         {showStepSummary
            ? // <div className="mb-5 rounded-lg border bg-white p-5 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
              //    <div className="flex space-x-4 rtl:space-x-reverse">
              //       <div className="my-auto">
              //          <div className="flex h-14 w-14 items-center justify-center rounded-full border border-secondary">
              //             <span className="text-xl font-bold text-secondary">3</span>
              //          </div>
              //       </div>
              //       <div className="my-auto  flex-1">
              //          <div className="text-xl font-bold text-secondary">
              //             <Translate id="web:flights-info" />
              //          </div>
              //          <div className="text-sm text-primary">
              //             {/* <div>
              //                {getValues('require_flights') === 'yes' && (
              //                   <Translate id="web:require_flights_yes" />
              //                )}
              //                {getValues('require_flights') === 'no' && (
              //                   <Translate id="web:require_flights_no" />
              //                )}
              //             </div> */}
              //             {getValues('require_flights') === 'yes' && (
              //                <React.Fragment>
              //                   <div className="flex   space-x-1">
              //                      <div>{getValues('departure_city_to')}</div>
              //                      <div className={classNames(lang === 'ar' && 'flip-x')}>
              //                         <ArrowRightIcon className="h-5 w-5" />
              //                      </div>
              //                      <div>{getValues('destination_to')}</div>
              //                      <div> - </div>
              //                      <div>
              //                         {getValues('expected_date_of_arrival') &&
              //                            format(
              //                               fromUnixTime(
              //                                  parseInt(getValues('expected_date_of_arrival') || '')
              //                               ),
              //                               'dd/MM/yyyy'
              //                            )}
              //                      </div>
              //                   </div>
              //                   <div className="flex space-x-1">
              //                      <div>{getValues('departure_city_from')}</div>
              //                      <div className={classNames(lang === 'ar' && 'flip-x')}>
              //                         <ArrowRightIcon className="h-5 w-5" />
              //                      </div>
              //                      <div>{getValues('destination_from')}</div>
              //                      <div> - </div>
              //                      <div>
              //                         {getValues('expected_date_of_departure') &&
              //                            format(
              //                               fromUnixTime(
              //                                  parseInt(getValues('expected_date_of_departure') || '')
              //                               ),
              //                               'dd/MM/yyyy'
              //                            )}
              //                      </div>
              //                   </div>
              //                </React.Fragment>
              //             )}
              //          </div>
              //       </div>
              //       <div className="my-auto">
              //          <button
              //             onClick={() => onUpdateClick()}
              //             type="button"
              //             className="font-bold text-secondary">
              //             <Translate id="web:update" />
              //          </button>
              //       </div>
              //    </div>
              // </div>
              ''
            : ''}
      </React.Fragment>
   );
};

export default FlightsInfo;
