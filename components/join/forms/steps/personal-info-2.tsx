// import classNames from 'classnames';
// import Cleave from 'cleave.js/react';
import React, { useState } from 'react';
import { Controller, useFormContext } from 'react-hook-form';
import SubmitBtn from '~/components/shared/buttons/submit-btn';
// import BankSelect from '~/components/shared/select/bank-select';
import { Translate, useTranslate } from '~/i18n';
// import isUniqueAttribute from '~/utils/unique-attribute';
// import IBAN from 'iban';
import cookie from 'js-cookie';
// import CustomFileInput from '~/components/shared/forms/custom-file-input/custom-file-input';
import CustomInput from '~/components/shared/forms/custom-input';
import toast from 'react-hot-toast';
// import { Icon } from '@iconify/react';
import { GuestType } from '~/interfaces/guest';
// import Axios from '~/utils/axios';
// import Cookies from 'js-cookie';
// import { useAuth } from '~/auth';
// import { useRouter } from 'next/router';
// import validateSAID from '~/utils/validate-id';
// import TibBox from '~/components/shared/forms/tip-box';
import CustomSelect from '~/components/shared/forms/custom-select/custom-select';
// import TitleTypeSelect from '~/data/status-types-select';
import VisaStatusTypeSelect from '~/data/visa-status-types-select';
import DocumentTypeSelect from '~/data/document-types-select';
import CountrySelect from '~/components/shared/select/countries-select';
import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import CustomDayInput from '~/components/shared/forms/custom-day-input';
import { getUnixTime, getYear } from 'date-fns';
import CustomFileInput2 from '~/components/shared/forms/custom-file-input-2/custom-file-input';
// import Image from '~/components/shared/image';
import CustomFileInput3 from '~/components/shared/forms/custom-file-input-2/custom-file-input-3';
import { ArrowTopRightOnSquareIcon, XMarkIcon } from '@heroicons/react/20/solid';
import { CountryType } from '~/interfaces/country';
import cookies from 'js-cookie';
// import ButtonBtn from '~/components/shared/buttons/button-btn';
import CalendarIconAppend from '~/components/shared/forms/calender-icon-append';
import Label from '~/components/shared/forms/label';
import BackBtn from '~/components/shared/buttons/back-btn';
import Axios from '~/utils/axios';
import PassportTypesSelect from '~/data/passport-types-select';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';
import { zonedTimeToUtc } from 'date-fns-tz';
import Modal from '~/components/shared/modals';
import classNames from 'classnames';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type PersonalInfo2Props = {
   onNextClick: () => any;
   onBackClick: () => any;
   onUpdateClick: () => any;

   step: string | undefined;
   showStepSummary?: boolean;

   // role?: string;
   token?: string;
   nextStep: string;
   role?: string;
   countries?: CountryType[];
   stepsNumber: number;
   optionalFields?: string[];
   visaStatusTypes?: string[];
};

type Item = {
   label: string;
   value: string;
};

const PersonalInfo2 = ({
   onNextClick,
   onBackClick,
   // onUpdateClick,
   step,
   showStepSummary,
   nextStep,
   role,
   // withToken,
   token,
   countries,
   stepsNumber,
   optionalFields,
   visaStatusTypes,
}: PersonalInfo2Props) => {
   const { translate, lang } = useTranslate();
   const [loading, setLoading] = useState(false);

   const {
      handleSubmit,
      getValues,
      control,
      setValue,
      register,
      watch,
      formState: { errors },
   } = useFormContext<GuestType>();
   const { executeRecaptcha } = useGoogleReCaptcha();
   const [isOpen, setIsOpen] = useState(false);
   const [isOpen2, setIsOpen2] = useState(false);

   const submitForm = async (values: GuestType) => {
      if (loading) {
         return;
      }
      setLoading(true);

      try {
         if (stepsNumber === 2) {
            const recaptcha = await executeRecaptcha?.();

            const data = {
               ...values,
               code: token || '', //todo: check
               category: role,
               email: values?.email?.toLowerCase(),
               phone_code: countries?.find(item => item.id === values.phone_code_id)?.phone_code,
               // callback_url: `${process.env.NEXT_PUBLIC_BASE_URL}/${lang}/${process.env.NEXT_PUBLIC_COMPETITIONS_REGISTER_CALLBACK_URL}`,
               recaptcha,
            };
            delete data.personal_image_url;
            delete data.document_copy_url;
            delete data.visa_copy_url;
            localStorage.removeItem('personal_image_x');
            localStorage.removeItem('doc1_x');
            localStorage.removeItem('doc2_x');

            //for speaker 4 steps
            delete data.require_flights;
            delete data.departure_city_to;
            delete data.destination_to;
            delete data.expected_date_of_arrival;
            delete data.specific_requirements_to;
            delete data.departure_city_from;
            delete data.destination_from;
            delete data.expected_date_of_departure;
            delete data.specific_requirements_from;
            delete data.comments;
            delete data.require_accommodation;
            delete data.special_requests;
            delete data.dietary_requirements;

            if (data.is_saudi === 'yes') {
               delete data.birth_city;
               delete data.issue_date;
               delete data.issue_place;
               delete data.visa_copy;
               delete data.visa_status;
            }
            // console.log(data, 'data');

            const response = await Axios.post(`guests?lang=${lang}`, data);
            cookies.set('reg_num', JSON.stringify(response.data.data));

            // to success page
            onNextClick();
         } else {
            const updatedUserObj = {
               ...values,
               step: nextStep,
            };

            cookie.set('user_data', JSON.stringify(updatedUserObj));
            toast.success(translate({ id: 'res:info_saved' }));
            setLoading(false);
            // to next step
            onNextClick();
         }
         // console.log(updatedUserObj, 'updatedUserObj');

         // cookie.set('user_data', JSON.stringify(updatedUserObj));
         // toast.success(translate({ id: 'res:info_saved' }));

         // to next step
         // onNextClick();

         //
      } catch (error: any) {
         setLoading(false);
         if (error.response?.status === 404) {
            toast.error(error.response?.data?.data);
         } else if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 4000,
            });
         } else {
            toast.error(translate({ id: 'res:500' }));
         }
         console.log(error, 'error');
      }
   };

   const getImgPlaceHolder = () => {
      switch (getValues('gender')) {
         case 'male':
            return '/images/man_dark.png';
         case 'female':
            return '/images/woman_dark.png';
         default:
            return '/images/man_dark.png';
      }
   };

   const renderDocumentTypeOption = () => {
      switch (getValues()['visa_status']) {
         case 'iqama':
            return DocumentTypeSelect.filter(item => item.value === 'iqama_id');
         case 'valid_visa':
            return DocumentTypeSelect.filter(item => item.value === 'passport');
         case 'need_visa':
            return DocumentTypeSelect.filter(item => item.value === 'passport');
         case 'gcc':
            return DocumentTypeSelect.filter(item => item.value === 'passport');
         default:
            return DocumentTypeSelect;
      }
   };

   // const renderDocumentTypeOption = () => {
   //    switch (getValues()['is_saudi']) {
   //       case 'no':
   //          return DocumentTypeSelect.filter(item => item.value !== 'saudi_id');
   //       default:
   //          return DocumentTypeSelect;
   //    }
   // };

   // const autoFillYes = () => {
   //    setValue('is_saudi', 'yes');
   //    setValue('document_number', '1212121212');
   //    setValue('expiration_date', '1682888400');
   //    setValue('full_name_on_document', 'full name');
   //    setValue('birth_date', '1682888400');
   //    setValue('document_type', 'saudi_id');
   //    setValue('religion', 'muslim'); //Portugal

   // setValue('full_name_on_document', 'full name');
   // };
   // const autoFillNo = () => {
   //    setValue('is_saudi', 'no');
   //    setValue('document_type', 'passport');
   //    setValue('visa_status', 'need_visa');
   //    setValue('document_number', '1212121212');
   //    setValue('issue_date', '1682888400');
   //    setValue('expiration_date', '1682888400');
   //    setValue('full_name_on_document', 'full name');
   //    setValue('birth_date', '1682888400');
   //    setValue('birth_city', 'Lisbon');
   //    setValue('issue_place', 'Lisbon');
   //    setValue('nationality', '992c5acc-9dda-431e-a650-00fed1632a3a'); //Portugal
   //    setValue('religion', 'christian'); //Portugal
   //    // setValue('full_name_on_document', 'full name');
   // };
   // console.log(getValues('expiration_date'));
   //todo fix this:
   const personal_image_x =
      (typeof window !== 'undefined' && localStorage.getItem('personal_image_x')) || '';
   const doc1_x = (typeof window !== 'undefined' && localStorage.getItem('doc1_x')) || '';
   const doc2_x = (typeof window !== 'undefined' && localStorage.getItem('doc2_x')) || '';

   // render inner inputs function
   const renderInnerInputs = (isSaudi: boolean) => {
      return (
         <React.Fragment>
            <div>
               <p className="text-black">
                  <Translate id="web:for_security_reasons_p" />
               </p>
               <div className="mt-4">
                  {/* document_type */}
                  {isSaudi === false && (
                     <div className="row">
                        <div className="self-center md:mb-5 md:col-3">
                           <Label
                              id="document_type"
                              isRequired={
                                 optionalFields && optionalFields.includes('document_type')
                                    ? false
                                    : true
                              }
                              label={translate({ id: 'web:document_type' })}
                           />
                        </div>
                        <div className="md:col-9">
                           <Controller
                              name="document_type"
                              control={control}
                              render={() => (
                                 <CustomSelect
                                    value={
                                       DocumentTypeSelect.find(
                                          item => item.value === getValues()['document_type']
                                       ) || ''
                                    }
                                    placeholder={translate({
                                       id: 'web:select_document_type',
                                    })}
                                    onChange={(value: any) => {
                                       setValue('document_type', String(value?.value), {
                                          shouldValidate: true,
                                       });
                                       setValue('document_number', null, {
                                          shouldValidate: false,
                                       });
                                    }}
                                    id="document_type"
                                    options={renderDocumentTypeOption()}
                                    error={errors.document_type?.message}
                                 />
                              )}
                              rules={{
                                 required:
                                    optionalFields && optionalFields.includes('document_type')
                                       ? false
                                       : translate({ id: 'validation:required' }),
                              }}
                           />
                        </div>
                     </div>
                  )}
                  {/* passport_type */}
                  {isSaudi === false && getValues()['visa_status'] !== 'iqama' && (
                     <div className="row">
                        <div className="self-center md:mb-5 md:col-3">
                           <Label
                              id="passport_type"
                              isRequired={
                                 optionalFields && optionalFields.includes('passport_type')
                                    ? false
                                    : true
                              }
                              label={translate({ id: 'web:passport_type' })}
                           />
                        </div>
                        <div className="md:col-9">
                           <Controller
                              name="passport_type"
                              control={control}
                              render={() => (
                                 <CustomSelect
                                    value={
                                       PassportTypesSelect.find(
                                          item => item.value === getValues()['passport_type']
                                       ) || ''
                                    }
                                    placeholder={translate({
                                       id: 'web:select_passport_type',
                                    })}
                                    onChange={(value: any) => {
                                       setValue('passport_type', String(value?.value), {
                                          shouldValidate: true,
                                       });
                                    }}
                                    id="passport_type"
                                    options={PassportTypesSelect}
                                    error={errors.passport_type?.message}
                                 />
                              )}
                              rules={{
                                 required:
                                    optionalFields && optionalFields.includes('passport_type')
                                       ? false
                                       : translate({ id: 'validation:required' }),
                              }}
                           />
                        </div>
                     </div>
                  )}

                  {/* document_number */}
                  <CustomInput
                     label={translate({ id: 'web:document_number' })}
                     type="text"
                     isRequired={
                        optionalFields && optionalFields.includes('document_number') ? false : true
                     }
                     isInline
                     autoComplete="off"
                     // inputMode="numeric"
                     placeHolder={renderDocumentNumberPlaceHolder(getValues('document_type'))}
                     id="document_number"
                     error={errors.document_number?.message}
                     {...register('document_number', {
                        required:
                           optionalFields && optionalFields.includes('document_number')
                              ? false
                              : translate({ id: 'validation:required' }),
                        validate: {
                           trim: (value: any) => {
                              if (value) {
                                 value == value.trim() ||
                                    translate({
                                       id: 'validation:delete_spaces',
                                    });
                              } else {
                                 return true;
                              }
                           },

                           minLength: (value: any) => {
                              if (value) {
                                 if (
                                    (getValues('document_type') === 'saudi_id' ||
                                       getValues('document_type') === 'iqama_id') &&
                                    value.length !== 10
                                 ) {
                                    return translate({
                                       id: 'validation:id_10_digit',
                                    });
                                 }
                                 return true;
                              } else {
                                 return true;
                              }
                           },
                        },
                        // pattern: false || {
                        //    value: /^[0-9]*$/,
                        //    message: translate({
                        //       id: 'validation:id_eng_numbers',
                        //    }),
                        // },
                        // minLength: {
                        //    value: 10,
                        //    message: translate({
                        //       id: 'validation:id_10_digit',
                        //    }),
                        // },
                        // maxLength: {
                        //    value: 10,
                        //    message: translate({
                        //       id: 'validation:id_10_digit',
                        //    }),
                        // },
                     })}
                  />
                  {/* issue_date */}
                  {isSaudi === false && (
                     <React.Fragment>
                        <CustomDayInput
                           label={translate({ id: 'web:issue_date' })}
                           type="text"
                           placeHolder={translate({ id: 'web:issue_date' })}
                           id="issue_date"
                           // defaultSelected={query.date_from?.toString()}
                           isInline
                           isRequired={
                              optionalFields && optionalFields.includes('issue_date') ? false : true
                           }
                           fromYear={getYear(new Date()) - 70}
                           toYear={getYear(new Date())}
                           {...register('issue_date', {
                              required:
                                 optionalFields && optionalFields.includes('issue_date')
                                    ? false
                                    : translate({ id: 'validation:required' }),
                           })}
                           append={<CalendarIconAppend />}
                           value={getValues('issue_date')}
                           error={errors.issue_date?.message}
                           callBack={(item: Date) => {
                              const timestamp = getUnixTime(item);
                              const saudiArabiaTimestamp =
                                 zonedTimeToUtc(timestamp * 1000, 'Asia/Riyadh').getTime() / 1000;
                              setValue('issue_date', saudiArabiaTimestamp.toString(), {
                                 shouldValidate: true,
                              });
                           }}
                        />

                        {/* issue_place */}
                        <CustomInput
                           label={translate({ id: 'web:issue_place' })}
                           type="text"
                           isRequired={
                              optionalFields && optionalFields.includes('issue_place')
                                 ? false
                                 : true
                           }
                           isInline
                           // disabled={!!user && role !== 'co-team-manager'}
                           autoComplete="off"
                           placeHolder={translate({
                              id: 'web:issue_place',
                           })}
                           id="issue_place"
                           error={errors.issue_place?.message}
                           {...register('issue_place', {
                              required:
                                 optionalFields && optionalFields.includes('issue_place')
                                    ? false
                                    : translate({ id: 'validation:required' }),
                           })}
                        />
                     </React.Fragment>
                  )}
                  {/* expiration_date */}
                  <CustomDayInput
                     label={translate({ id: 'web:expiration_date' })}
                     type="text"
                     placeHolder={translate({ id: 'web:expiration_date' })}
                     id="expiration_date"
                     // defaultSelected={query.date_from?.toString()}
                     isInline
                     isRequired={
                        optionalFields && optionalFields.includes('expiration_date') ? false : true
                     }
                     fromYear={getYear(new Date())}
                     toYear={getYear(new Date()) + 30}
                     {...register('expiration_date', {
                        required:
                           optionalFields && optionalFields.includes('expiration_date')
                              ? false
                              : translate({ id: 'validation:required' }),
                     })}
                     append={<CalendarIconAppend />}
                     value={getValues('expiration_date')}
                     error={errors.expiration_date?.message}
                     callBack={(item: Date) => {
                        const timestamp = getUnixTime(item);
                        const saudiArabiaTimestamp =
                           zonedTimeToUtc(timestamp * 1000, 'Asia/Riyadh').getTime() / 1000;
                        setValue('expiration_date', saudiArabiaTimestamp.toString(), {
                           shouldValidate: true,
                        });
                     }}
                  />

                  {/* full_name_on_document */}
                  <CustomInput
                     label={translate({
                        id: 'web:full_name_on_document',
                     })}
                     type="text"
                     isRequired={
                        optionalFields && optionalFields.includes('full_name_on_document')
                           ? false
                           : true
                     }
                     isInline
                     // disabled={!!user && role !== 'co-team-manager'}
                     autoComplete="off"
                     placeHolder={translate({
                        id: 'web:full_name_on_document',
                     })}
                     id="full_name_on_document"
                     error={errors.full_name_on_document?.message}
                     {...register('full_name_on_document', {
                        required:
                           optionalFields && optionalFields.includes('full_name_on_document')
                              ? false
                              : translate({ id: 'validation:required' }),
                        maxLength: {
                           value: 100,
                           message: translate({
                              id: 'validation:you_reached_the_text_limit',
                           }),
                        },
                     })}
                  />
                  {/* birth_date */}
                  <CustomDayInput
                     label={translate({ id: 'web:birth_date' })}
                     type="text"
                     placeHolder={translate({ id: 'web:birth_date' })}
                     id="birth_date"
                     fromYear={getYear(new Date()) - 100}
                     toYear={getYear(new Date())}
                     // defaultSelected={query.date_from?.toString()}
                     isInline
                     isRequired={
                        optionalFields && optionalFields.includes('birth_date') ? false : true
                     }
                     {...register('birth_date', {
                        required:
                           optionalFields && optionalFields.includes('birth_date')
                              ? false
                              : translate({ id: 'validation:required' }),
                     })}
                     disabledDays={(date: Date) => date > new Date()}
                     append={<CalendarIconAppend />}
                     value={getValues('birth_date')}
                     error={errors.birth_date?.message}
                     callBack={(item: Date) => {
                        const timestamp = getUnixTime(item);
                        const saudiArabiaTimestamp =
                           zonedTimeToUtc(timestamp * 1000, 'Asia/Riyadh').getTime() / 1000;
                        setValue('birth_date', saudiArabiaTimestamp.toString(), {
                           shouldValidate: true,
                        });
                     }}
                  />
                  {isSaudi === false && (
                     <React.Fragment>
                        {/* birth_city */}
                        <CustomInput
                           label={translate({ id: 'web:birth_city' })}
                           type="text"
                           isRequired={
                              optionalFields && optionalFields.includes('birth_city') ? false : true
                           }
                           isInline
                           // disabled={!!user && role !== 'co-team-manager'}
                           autoComplete="off"
                           placeHolder={translate({
                              id: 'web:birth_city',
                           })}
                           id="birth_city"
                           error={errors.birth_city?.message}
                           {...register('birth_city', {
                              required:
                                 optionalFields && optionalFields.includes('birth_city')
                                    ? false
                                    : translate({ id: 'validation:required' }),
                           })}
                        />
                        {/* nationality */}

                        <Controller
                           name="nationality"
                           control={control}
                           render={() => (
                              <CountrySelect
                                 isRequired={
                                    optionalFields && optionalFields.includes('nationality')
                                       ? false
                                       : true
                                 }
                                 selected_id={getValues()['nationality']} // on edit
                                 label={translate({ id: 'web:nationality' })}
                                 errors={errors.nationality?.message}
                                 callBack={(item: Item) => {
                                    setValue('nationality', item.value, {
                                       shouldValidate: true,
                                    });
                                 }}
                              />
                           )}
                           rules={{
                              required:
                                 optionalFields && optionalFields.includes('nationality')
                                    ? false
                                    : translate({ id: 'validation:required' }),
                           }}
                        />

                        {/* visa_copy */}
                        {watch('visa_status') !== null ? (
                           watch('visa_status') === 'need_visa' ? (
                              <CustomInput
                                 label={translate({ id: 'web:saudi_embassy_city' })}
                                 type="text"
                                 isRequired={
                                    optionalFields && optionalFields.includes('saudi_embassy_city')
                                       ? false
                                       : true
                                 }
                                 isInline
                                 // disabled={!!user && role !== 'co-team-manager'}
                                 autoComplete="off"
                                 placeHolder={translate({
                                    id: 'web:saudi_embassy_city',
                                 })}
                                 id="saudi_embassy_city"
                                 error={errors.saudi_embassy_city?.message}
                                 {...register('saudi_embassy_city', {
                                    required:
                                       optionalFields &&
                                       optionalFields.includes('saudi_embassy_city')
                                          ? false
                                          : translate({ id: 'validation:required' }),
                                 })}
                              />
                           ) : (
                              ''
                           )
                        ) : (
                           ''
                        )}
                        {/* religion */}
                        <CustomRadioInput
                           label={translate({ id: 'web:religion' })}
                           isRequired={
                              optionalFields && optionalFields.includes('religion') ? false : true
                           }
                           isInline={true}
                           options={[
                              { value: 'muslim', label: translate({ id: 'web:muslim' }) },
                              { value: 'christian', label: translate({ id: 'web:christian' }) },
                              { value: 'other', label: translate({ id: 'web:other' }) },
                           ]}
                           id="religion"
                           error={errors.religion?.message}
                           {...register('religion', {
                              required:
                                 optionalFields && optionalFields.includes('religion')
                                    ? false
                                    : translate({ id: 'validation:required' }),
                           })}
                        />
                     </React.Fragment>
                  )}
               </div>
               <div>
                  <hr className="my-7 border-primary" />
                  {/* <p className="text-accent">
                     <Translate id="web:upload_document_p" />
                  </p> */}
                  <div className="mt-4">
                     {/* personal_image */}
                     <Controller
                        name="personal_image"
                        control={control}
                        render={({ field: { ref } }) => (
                           <CustomFileInput2
                              label={translate({ id: 'web:personal_image' })}
                              id="personal_image"
                              isRequired={true}
                              error={
                                 errors.personal_image?.message || errors.personal_image?.message
                              }
                              ref={ref}
                              inputName="personal_image"
                              withCrop
                              note={
                                 <React.Fragment>
                                    <span className="block text-center text-sm text-black">
                                       <Translate id="web:upload_document_p" />
                                    </span>
                                 </React.Fragment>
                              }
                              placeholderImg={
                                 <div className="relative mx-auto h-32 w-32 rounded-full">
                                    {/* delete button */}
                                    {getValues('personal_image') != null && personal_image_x && (
                                       <div
                                          onClick={() => {
                                             setValue('personal_image', null, {
                                                shouldValidate: true,
                                             });
                                             // setValue('personal_image_url', null, {
                                             //    shouldValidate: true,
                                             // });
                                             localStorage.removeItem('personal_image_x');

                                             const el = document.getElementById(
                                                'personal_image'
                                             ) as HTMLInputElement;

                                             if (el) {
                                                el.value = '';
                                             }
                                          }}
                                          className="absolute top-1 flex h-6 w-6  cursor-pointer items-center justify-center rounded-full border border-black bg-white text-black ltr:right-1 rtl:left-1">
                                          <XMarkIcon className="h-4 w-4" />
                                       </div>
                                    )}
                                    {getValues('personal_image') ? (
                                       <img
                                          src={personal_image_x || getImgPlaceHolder()}
                                          className="rounded-full border border-primary object-cover"
                                          // alt=""
                                       />
                                    ) : (
                                       <img
                                          src={getImgPlaceHolder()}
                                          className="rounded-full border border-primary object-cover"
                                          // alt=""
                                       />
                                    )}
                                 </div>
                              }
                              help={
                                 <React.Fragment>
                                    <span className="block text-center text-sm text-black">
                                       <Translate id="web:only_jpg_png" />
                                    </span>
                                 </React.Fragment>
                              }
                              callBack={(id?: string | null, url?: string | null) => {
                                 setValue('personal_image', id || null, {
                                    shouldValidate: true,
                                 });
                                 // setValue('personal_image_url', url || null, {
                                 //    shouldValidate: true,
                                 // });
                                 try {
                                    // Save the base64 image in localStorage
                                    localStorage.setItem('personal_image_x', url || '');
                                 } catch {
                                    console.log('Failed to save the image in localStorage');
                                 }
                              }}
                           />
                        )}
                        rules={{
                           required: translate({ id: 'validation:required' }),
                        }}
                     />
                     {/* document_copy */}
                     <Controller
                        name="document_copy"
                        control={control}
                        render={({ field: { ref } }) => (
                           <CustomFileInput3
                              label={translate({
                                 id: 'web:document_copy',
                                 values: {
                                    id: getValues('document_type')
                                       ? translate({ id: `web:${getValues('document_type')}` })
                                       : translate({ id: 'web:id' }),
                                 },
                              })}
                              id="document_copy"
                              isRequired={
                                 optionalFields && optionalFields.includes('document_copy')
                                    ? false
                                    : true
                              }
                              // isInline
                              error={errors.document_copy?.message || errors.document_copy?.message}
                              ref={ref}
                              inputName="document_copy"
                              help={
                                 <React.Fragment>
                                    <span className="block text-center text-sm text-black">
                                       <Translate id="web:only_jpg_png" />
                                    </span>
                                 </React.Fragment>
                              }
                              placeholderImg={
                                 getValues('document_copy') != null &&
                                 doc1_x && (
                                    <div className="flex h-[38px] items-center justify-center space-x-2 rtl:space-x-reverse">
                                       <div>
                                          <button
                                             type="button"
                                             onClick={() => setIsOpen(true)}
                                             className="flex items-center space-x-1 rounded-full  border border-secondary p-0 px-2   text-secondary hover:border-secondary-600 hover:text-secondary-600 rtl:space-x-reverse">
                                             <span>
                                                <Translate id="web:view_file" />
                                             </span>
                                             <span>
                                                <ArrowTopRightOnSquareIcon className="h-3 w-3" />
                                             </span>
                                          </button>
                                       </div>
                                       <div
                                          onClick={() => {
                                             setValue('document_copy', null, {
                                                shouldValidate: true,
                                             });
                                             // setValue('document_copy_url', null, {
                                             //    shouldValidate: true,
                                             // });
                                             localStorage.removeItem('doc1_x');

                                             const el = document.getElementById(
                                                'document_copy'
                                             ) as HTMLInputElement;

                                             if (el) {
                                                el.value = '';
                                             }
                                          }}
                                          className="flex cursor-pointer items-center justify-center rounded-full bg-red-500 px-2   text-white hover:bg-red-600">
                                          <Translate id="web:delete" />
                                       </div>
                                    </div>
                                 )
                              }
                              callBack={(id?: string | null, url?: string | null) => {
                                 setValue('document_copy', id || null, {
                                    shouldValidate: true,
                                 });
                                 // setValue('document_copy_url', url || null, {
                                 //    shouldValidate: true,
                                 // });
                                 try {
                                    // Save the base64 image in localStorage
                                    localStorage.setItem('doc1_x', url || '');
                                 } catch {
                                    console.log('Failed to save the image in localStorage');
                                 }
                              }}
                           />
                        )}
                        rules={{
                           required:
                              optionalFields && optionalFields.includes('document_copy')
                                 ? false
                                 : translate({ id: 'validation:required' }),
                        }}
                     />
                     {/* visa_copy */}
                     {watch('visa_status') !== null ? (
                        watch('visa_status') === 'valid_visa' ? (
                           <Controller
                              name="visa_copy"
                              control={control}
                              render={({ field: { ref } }) => (
                                 <CustomFileInput3
                                    label={translate({ id: 'web:visa_copy' })}
                                    id="visa_copy"
                                    isRequired={
                                       optionalFields && optionalFields.includes('visa_copy')
                                          ? false
                                          : true
                                    }
                                    // isInline
                                    error={errors.visa_copy?.message || errors.visa_copy?.message}
                                    ref={ref}
                                    inputName="visa_copy"
                                    help={
                                       <React.Fragment>
                                          <span className="block text-center text-sm text-black">
                                             <Translate id="web:only_pdf_jpg_png" />
                                          </span>
                                       </React.Fragment>
                                    }
                                    // placeholderImg
                                    placeholderImg={
                                       getValues()['visa_copy'] !== null &&
                                       doc2_x && (
                                          <div className="flex h-[38px] items-center justify-center space-x-2 rtl:space-x-reverse">
                                             <div>
                                                <button
                                                   type="button"
                                                   onClick={() => setIsOpen2(true)}
                                                   className="flex items-center space-x-1 rounded-full  border border-secondary p-0 px-2   text-secondary hover:border-secondary-600 hover:text-secondary-600 rtl:space-x-reverse">
                                                   <span>
                                                      <Translate id="web:view_file" />
                                                   </span>
                                                   <span>
                                                      <ArrowTopRightOnSquareIcon className="h-3 w-3" />
                                                   </span>
                                                </button>
                                             </div>
                                             <div
                                                onClick={() => {
                                                   setValue('visa_copy', null, {
                                                      shouldValidate: true,
                                                   });
                                                   // setValue('visa_copy_url', null, {
                                                   //    shouldValidate: true,
                                                   // });
                                                   localStorage.removeItem('doc2_x');

                                                   const el = document.getElementById(
                                                      'visa_copy'
                                                   ) as HTMLInputElement;

                                                   if (el) {
                                                      el.value = '';
                                                   }
                                                }}
                                                className="flex cursor-pointer items-center justify-center rounded-full bg-red-500 px-2   text-white hover:bg-red-600">
                                                <Translate id="web:delete" />
                                             </div>
                                          </div>
                                       )
                                    }
                                    callBack={(id?: string | null, url?: string | null) => {
                                       setValue('visa_copy', id || null, {
                                          shouldValidate: true,
                                       });
                                       // setValue('visa_copy_url', url || null, {
                                       //    shouldValidate: true,
                                       // });
                                       try {
                                          // Save the base64 image in localStorage
                                          localStorage.setItem('doc2_x', url || '');
                                       } catch {
                                          console.log('Failed to save the image in localStorage');
                                       }
                                    }}
                                 />
                              )}
                              rules={{
                                 required:
                                    optionalFields && optionalFields.includes('visa_copy')
                                       ? false
                                       : translate({ id: 'validation:required' }),
                              }}
                           />
                        ) : (
                           ''
                        )
                     ) : (
                        ''
                     )}
                  </div>
               </div>
            </div>
         </React.Fragment>
      );
   };

   const getSaudiNationalityId = () => {
      const result = countries?.find(item => item.code === 'SA');
      if (result) {
         return result.id;
      } else {
         return null;
      }
   };
   // const getNationalityName = (id?: string | null) => {
   //    if (id) {
   //       const result = countries?.find(item => item.id === id);
   //       if (result) {
   //          return result?.name;
   //       } else {
   //          return '';
   //       }
   //    } else {
   //       return '';
   //    }
   // };

   const renderDocumentNumberPlaceHolder = (documentType: string | null) => {
      switch (documentType) {
         case 'saudi_id':
            return translate({
               id: 'web:document_number_saudi_id',
            });
         case 'passport':
            return translate({
               id: 'web:document_number_passport',
            });
         case 'iqama_id':
            return translate({
               id: 'web:document_number_iqama_id',
            });
         default:
            return translate({
               id: 'web:document_number',
            });
      }
   };

   return (
      <React.Fragment>
         {step === 'personal-info-2' ? (
            <div className="rounded-lg border bg-white shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
               <div className="p-6 sm:p-12">
                  <div className=" text-xl font-bold capitalize text-primary md:mb-4 md:text-2xl">
                     <Translate id="web:id_information" />
                  </div>
                  <div className="pt-5">
                     <form
                        noValidate
                        onSubmit={handleSubmit(submitForm)}
                        className="relative"
                        autoComplete="off">
                        <div>
                           {/* is_saudi */}
                           <CustomRadioInput
                              label={translate({ id: 'web:is_saudi' })}
                              isRequired
                              isInline={true}
                              options={[
                                 { value: 'yes', label: translate({ id: 'web:yes' }) },
                                 { value: 'no', label: translate({ id: 'web:no' }) },
                              ]}
                              id="is_saudi"
                              error={errors.is_saudi?.message}
                              {...register('is_saudi', {
                                 required: translate({ id: 'validation:required' }),
                                 onChange: e => {
                                    setValue('document_type', null, {
                                       shouldValidate: false,
                                    });
                                    setValue('visa_status', null, {
                                       shouldValidate: false,
                                    });
                                    setValue('document_number', null, {
                                       shouldValidate: false,
                                    });
                                    if (e.target.value === 'yes') {
                                       setValue('religion', 'muslim', {
                                          shouldValidate: false,
                                       });
                                       setValue('nationality', getSaudiNationalityId(), {
                                          shouldValidate: false,
                                       });
                                       setValue('document_type', 'saudi_id', {
                                          shouldValidate: false,
                                       });
                                    } else {
                                       setValue('religion', null, {
                                          shouldValidate: false,
                                       });
                                       setValue('nationality', null, {
                                          shouldValidate: false,
                                       });
                                    }
                                 },
                              })}
                           />
                           {/* watch is_saudi */}
                           {watch('is_saudi') !== null ? (
                              watch('is_saudi') === 'yes' ? (
                                 <React.Fragment>{renderInnerInputs(true)}</React.Fragment>
                              ) : (
                                 <React.Fragment>
                                    {/* visa_status */}
                                    <div className="row">
                                       <div className="self-center md:mb-5 md:col-3">
                                          <Label
                                             id="visa_status"
                                             isRequired
                                             label={translate({ id: 'web:visa_status' })}
                                          />
                                       </div>
                                       <div className="md:col-9">
                                          <Controller
                                             name="visa_status"
                                             control={control}
                                             render={() => (
                                                <CustomSelect
                                                   value={
                                                      VisaStatusTypeSelect.find(
                                                         item =>
                                                            item.value ===
                                                            getValues()['visa_status']
                                                      ) || ''
                                                   }
                                                   placeholder={translate({
                                                      id: 'web:select_visa_status',
                                                   })}
                                                   onChange={(value: any) => {
                                                      setValue(
                                                         'visa_status',
                                                         String(value?.value),
                                                         {
                                                            shouldValidate: true,
                                                         }
                                                      );
                                                      setValue('document_type', null, {
                                                         shouldValidate: false,
                                                      });
                                                   }}
                                                   id="visa_status"
                                                   options={
                                                      visaStatusTypes && visaStatusTypes?.length > 0
                                                         ? VisaStatusTypeSelect.filter(x =>
                                                              visaStatusTypes?.includes(x.value)
                                                           )
                                                         : VisaStatusTypeSelect
                                                   }
                                                   error={errors.visa_status?.message}
                                                />
                                             )}
                                             rules={{
                                                required: translate({
                                                   id: 'validation:required',
                                                }),
                                             }}
                                          />
                                       </div>
                                    </div>
                                    <div>
                                       {watch('visa_status') !== null ? (
                                          watch('visa_status') === 'valid_visa' ||
                                          watch('visa_status') === 'iqama' ||
                                          watch('visa_status') === 'need_visa' ||
                                          watch('visa_status') === 'gcc' ? (
                                             <React.Fragment>
                                                {renderInnerInputs(false)}
                                             </React.Fragment>
                                          ) : (
                                             ''
                                          )
                                       ) : (
                                          ''
                                       )}
                                    </div>
                                 </React.Fragment>
                              )
                           ) : (
                              ''
                           )}
                        </div>
                        <div className="mt-10">
                           {/* {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}
                                       callBack={() => autoFillYes()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill yes '}
                                    />
                                 </div>
                              </div>
                           )}{' '} */}
                           {/* {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}
                                       callBack={() => autoFillNo()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill no '}
                                    />
                                 </div>
                              </div>
                           )} */}
                           <div className="row ">
                              <div className="col-6 sm:col-3 sm:offset-3">
                                 <BackBtn
                                    id="back-btn" //* for test cases
                                    // loading={loading}
                                    callBack={() => {
                                       onBackClick();
                                    }}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:back` })}`}
                                 />
                              </div>
                              <div className="col-6 sm:col-3">
                                 <SubmitBtn
                                    id="submit-btn" //* for test cases
                                    loading={loading}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({
                                       id: `web:${stepsNumber === 4 ? 'next' : 'submit'}`,
                                    })}`}
                                 />
                              </div>
                           </div>
                        </div>
                     </form>
                  </div>
               </div>
            </div>
         ) : (
            ''
         )}
         {showStepSummary
            ? // <div
              //    className={classNames(
              //       'mb-5 rounded-xl border bg-white p-5 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]'
              //    )}>
              //    <div className="flex space-x-4 rtl:space-x-reverse">
              //       <div className="my-auto">
              //          <div className="flex h-14 w-14 items-center justify-center rounded-full border border-secondary">
              //             <span className="text-xl font-bold text-secondary">2</span>
              //          </div>
              //       </div>
              //       <div className="my-auto flex-1">
              //          <div className="text-xl font-bold text-secondary">
              //             <Translate id="web:personal-info-2" />
              //          </div>
              //          <div className="text-sm text-primary">
              //             {getValues('is_saudi') === 'yes' && <Translate id="web:saudi" />}
              //             {getValues('is_saudi') === 'no' &&
              //                getNationalityName(getValues('nationality'))}
              //             <span className="font-bold">,</span> {getValues('document_number')}
              //             <span className="font-bold">,</span>{' '}
              //             {format(
              //                fromUnixTime(parseInt(getValues('birth_date') || '')),
              //                'dd/MM/yyyy'
              //             )}
              //          </div>
              //       </div>
              //       <div className="my-auto">
              //          <button
              //             onClick={() => onUpdateClick()}
              //             type="button"
              //             className="font-bold text-secondary">
              //             <Translate id="web:update" />
              //          </button>
              //       </div>
              //    </div>
              // </div>
              ''
            : ''}
         <Modal size="md" open={isOpen}>
            <Modal.Body>
               <div className="">
                  <div className="relative rounded-lg border bg-white p-4 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)] sm:px-10 sm:py-6">
                     <div className="">
                        <div className="row">
                           <div className="md:col-8 md:offset-2">
                              <div className="">
                                 <img
                                    src={doc1_x || ''}
                                    className="border border-primary object-cover"
                                    // alt=""
                                 />
                              </div>
                           </div>
                        </div>
                        <div className="row mt-5">
                           <div className="md:col-6 md:offset-3">
                              <button
                                 type="button"
                                 className={classNames(
                                    ' block w-full  border border-gray-500 px-4 py-[11px] text-center text-sm font-medium leading-5 text-gray-500 transition-colors duration-150  focus:outline-none focus:ring  focus:ring-opacity-50  ',
                                    'disabled:cursor-not-allowed disabled:opacity-50 ',
                                    'enabled:focus:ring-accent enabled:focus:ring-opacity-50 '
                                 )}
                                 onClick={() => {
                                    setIsOpen(false);
                                 }}>
                                 <Translate id="web:no_cancel" />
                              </button>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </Modal.Body>
         </Modal>
         <Modal size="md" open={isOpen2}>
            <Modal.Body>
               <div className="">
                  <div className="relative rounded-lg border bg-white p-4 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)] sm:px-10 sm:py-6">
                     <div className="">
                        <div className="row">
                           <div className="md:col-8 md:offset-2">
                              <div className="">
                                 <img
                                    src={doc2_x || ''}
                                    className="border border-primary object-cover"
                                    // alt=""
                                 />
                              </div>
                           </div>
                        </div>
                        <div className="row mt-5">
                           <div className="md:col-6 md:offset-3">
                              <button
                                 type="button"
                                 className={classNames(
                                    ' block w-full  border border-gray-500 px-4 py-[11px] text-center text-sm font-medium leading-5 text-gray-500 transition-colors duration-150  focus:outline-none focus:ring  focus:ring-opacity-50  ',
                                    'disabled:cursor-not-allowed disabled:opacity-50 ',
                                    'enabled:focus:ring-accent enabled:focus:ring-opacity-50 '
                                 )}
                                 onClick={() => {
                                    setIsOpen2(false);
                                 }}>
                                 <Translate id="web:no_cancel" />
                              </button>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </Modal.Body>
         </Modal>
      </React.Fragment>
   );
};

export default PersonalInfo2;
