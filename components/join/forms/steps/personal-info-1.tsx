import classNames from 'classnames';
import React, { useState } from 'react';
import { Controller, useFormContext } from 'react-hook-form';
import SubmitBtn from '~/components/shared/buttons/submit-btn';
import CustomInput from '~/components/shared/forms/custom-input';
import { Translate, useTranslate } from '~/i18n';
import cookie from 'js-cookie';
import toast from 'react-hot-toast';
import { GuestType } from '~/interfaces/guest';
import CountrySelect from '~/components/shared/select/countries-select';
import validator from 'validator';
import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import isUniqueAttribute from '~/utils/unique-attribute';
import { CountryType } from '~/interfaces/country';
// import ButtonBtn from '~/components/shared/buttons/button-btn';
import TitleSelect from '~/components/shared/select/titles-select';
import Label from '~/components/shared/forms/label';
import BackBtn from '~/components/shared/buttons/back-btn';
import CustomSelect from '~/components/shared/forms/custom-select/custom-select';
import OrganizationSizeTypeSelect from '~/data/org-size-types-select';
import IndustryTypeSelect from '~/data/industry-types-select';
// import AreaOfInterestSelect from '~/data/area-of-interset-select';
import Modal from '~/components/shared/modals';
import VerifyEmailForm from '../../verify-email-form';
// import PositionTypeSelect from '~/data/postion-types-select';
// import GenericOptionsSelect from '~/data/area-of-interset-generic-select';
// import CheckboxInput from '~/components/shared/forms/checkbox-input';
import PositionSelect from '~/components/shared/select/positions-select';
// import TitleSelectNew from '~/components/shared/select/titles-select-new';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type PersonalInfoProps = {
   onNextClick: () => any;
   onUpdateClick: () => any;
   onBackClick: () => any;
   setStep?: (val: string) => any;
   step?: string | undefined;
   showStepSummary?: boolean;
   nextStep?: string;
   countries: CountryType[];
   guestEmail?: string | null;
   guestFirstName?: string | null;
   guestLastName?: string | null;
   role?: string;
   optionalFields?: string[];
   withOtp: boolean;
};

type Item = {
   label: string;
   value: string;
};

const PersonalInfo = ({
   onNextClick,
   onBackClick,
   // onUpdateClick,
   step,
   showStepSummary,
   nextStep,
   countries,
   guestEmail,
   guestFirstName,
   guestLastName,
   // role,
   optionalFields,
   withOtp,
}: // role,
PersonalInfoProps) => {
   const { translate } = useTranslate();
   // const [loading, setLoading] = useState(false);
   // console.log(guestEmail, 'guestEmail');
   // console.log(guestFirstName, 'guestFirstName');
   // console.log(guestLastName, 'guestLastName');
   const [isOpen, setIsOpen] = useState(false);

   const {
      register,
      handleSubmit,
      getValues,
      control,
      setValue,
      formState: { errors },
   } = useFormContext<GuestType>();

   const submitForm = async (values: GuestType) => {
      // console.log(role, 'role');

      // setLoading(true);
      try {
         if (getValues('is_email_verified') === 'yes') {
            const updatedUserObj = {
               ...values,
               step: nextStep,
            };
            cookie.set('user_data', JSON.stringify(updatedUserObj));
            toast.success(translate({ id: 'res:info_saved' }));
            onNextClick();
         } else {
            if (!withOtp) {
               const updatedUserObj = {
                  ...values,
                  step: nextStep,
               };
               cookie.set('user_data', JSON.stringify(updatedUserObj));
               toast.success(translate({ id: 'res:info_saved' }));
               onNextClick();
            } else {
               setIsOpen(true);
            }
         }
      } catch (error: any) {
         console.log(error, 'error');
      }
      // setLoading(false);
   };
   const submitForm2 = async () => {
      // setLoading(true);
      try {
         const values = getValues();

         const updatedUserObj = {
            ...values,
            step: nextStep,
         };
         cookie.set('user_data', JSON.stringify(updatedUserObj));
         toast.success(translate({ id: 'res:info_saved' }));
         onNextClick();
      } catch (error: any) {
         console.log(error, 'error');
      }
      // setLoading(false);
   };

   const IsSaudiPhoneNumberSelected = (id?: string) => {
      if (id) {
         const result = countries.find(item => item.id === id);
         if (result && result.code === 'SA') {
            return true;
         } else {
            return false;
         }
      } else {
         return false;
      }
   };
   // const getCountryCodeId = (id?: string | null) => {
   //    if (id) {
   //       const result = countries.find(item => item.id === id);
   //       if (result) {
   //          return result?.phone_code;
   //       } else {
   //          return '';
   //       }
   //    } else {
   //       return '';
   //    }
   // };

   // const autoFillSA = () => {
   //    setValue('gender', 'male');
   //    // setValue('title_id', 'mr');
   //    setValue('first_name', 'F name xy');
   //    setValue('last_name', 'L name xy');

   //    setValue('company', 'company name');
   //    setValue('position', 'position');
   //    // setValue('country_of_residence', '992c5acc-a12d-49d9-90bc-896559e7f4d9');
   //    // setValue('city', 'city name');
   //    setValue('email', 'eissauxdev@gmail.com');
   //    // setValue('phone_code_id', '992c5acc-a12d-49d9-90bc-896559e7f4d9');
   //    setValue('phone', '508000000');
   // };
   // const autoFillNotSA = () => {
   //    setValue('gender', 'female');
   //    // setValue('title_id', 'ms');
   //    setValue('first_name', 'F name xx');
   //    setValue('last_name', 'L name xx');

   //    setValue('company', 'company name');
   //    setValue('position', 'position');
   //    // setValue('country_of_residence', '992c5acc-9dda-431e-a650-00fed1632a3a'); //Portugal
   //    // setValue('nationality', '992c5acc-9dda-431e-a650-00fed1632a3a');

   //    // setValue('city', 'city name');
   //    setValue('email', 'eissauxdev@gmail.com');
   //    // setValue('phone_code_id', '992c5acc-9dda-431e-a650-00fed1632a3a');
   //    setValue('phone', '508000000');
   // };
   return (
      <React.Fragment>
         {step === 'personal-info-1' ? (
            <div className="rounded-lg border bg-white shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
               <div className="p-6 sm:p-12">
                  <h2
                     className={classNames(
                        'text-xl font-bold capitalize text-gray-800 md:mb-4 md:text-2xl'
                     )}>
                     <Translate id="web:personal_information" />
                  </h2>

                  <div className="pt-5">
                     <form
                        noValidate
                        onSubmit={handleSubmit(submitForm)}
                        className="relative"
                        autoComplete="off">
                        {/* gender */}
                        <CustomRadioInput
                           label={translate({ id: 'web:gender' })}
                           isRequired
                           isInline
                           options={[
                              { value: 'male', label: translate({ id: 'web:male' }) },
                              { value: 'female', label: translate({ id: 'web:female' }) },
                           ]}
                           id="gender"
                           error={errors.gender?.message}
                           {...register('gender', {
                              required: translate({ id: 'validation:required' }),
                           })}
                        />
                        {/* title_id */}
                        <Controller
                           name="title_id"
                           control={control}
                           render={() => (
                              <TitleSelect
                                 // role={role}
                                 isRequired={true}
                                 selected_id={getValues()['title_id']} // on edit
                                 label={translate({ id: 'web:title' })}
                                 errors={errors.title_id?.message}
                                 callBack={(item: Item) => {
                                    setValue('title_id', item.value, {
                                       shouldValidate: true,
                                    });
                                 }}
                              />
                           )}
                           rules={{
                              required: translate({ id: 'validation:required' }),
                           }}
                        />

                        {/* first_name */}
                        <CustomInput
                           label={translate({ id: 'web:first_name' })}
                           type="text"
                           isRequired
                           isInline
                           autoComplete="off"
                           placeHolder={translate({ id: 'web:first_name' })}
                           id="first_name"
                           disabled={guestFirstName !== null}
                           error={errors.first_name?.message}
                           {...register('first_name', {
                              required: translate({ id: 'validation:required' }),
                              pattern: {
                                 value: /^[a-zA-Z0-9 -]+$/i,
                                 message: translate({
                                    id: 'validation:english_letters',
                                 }),
                              },
                           })}
                        />

                        {/* last_name */}
                        <CustomInput
                           label={translate({ id: 'web:last_name' })}
                           type="text"
                           autoComplete="off"
                           placeHolder={translate({ id: 'web:last_name' })}
                           id="last_name"
                           isRequired
                           isInline
                           disabled={guestLastName !== null}
                           error={errors.last_name?.message}
                           {...register('last_name', {
                              required: translate({ id: 'validation:required' }),
                              pattern: {
                                 value: /^[a-zA-Z0-9 -]+$/i,
                                 message: translate({
                                    id: 'validation:english_letters',
                                 }),
                              },
                           })}
                        />

                        {/* company */}
                        <CustomInput
                           label={translate({ id: 'web:company' })}
                           type="text"
                           autoComplete="off"
                           // disabled={!!user && role !== 'co-team-manager'}
                           placeHolder={translate({ id: 'web:company' })}
                           id="company"
                           isRequired
                           isInline
                           error={errors.company?.message}
                           {...register('company', {
                              required: translate({ id: 'validation:required' }),
                              maxLength: {
                                 value: 100,
                                 message: translate({
                                    id: 'validation:you_reached_the_text_limit',
                                 }),
                              },
                           })}
                        />
                        {/* position_id */}
                        <Controller
                           name="position_id"
                           control={control}
                           render={() => (
                              <PositionSelect
                                 // role={role}
                                 isRequired={true}
                                 selected_id={getValues()['position_id']} // on edit
                                 label={translate({ id: 'web:position' })}
                                 errors={errors.position_id?.message}
                                 callBack={(item: Item) => {
                                    setValue('position_id', item.value, {
                                       shouldValidate: true,
                                    });
                                 }}
                              />
                           )}
                           rules={{
                              required: translate({ id: 'validation:required' }),
                           }}
                        />

                        {/* job_title */}
                        <CustomInput
                           label={translate({ id: 'web:job_title' })}
                           type="text"
                           autoComplete="off"
                           // disabled={!!user && role !== 'co-team-manager'}
                           placeHolder={translate({ id: 'web:job_title' })}
                           id="job_title"
                           isRequired
                           isInline
                           error={errors.job_title?.message}
                           {...register('job_title', {
                              required: translate({ id: 'validation:required' }),
                              maxLength: {
                                 value: 100,
                                 message: translate({
                                    id: 'validation:you_reached_the_text_limit',
                                 }),
                              },
                           })}
                        />
                        {/* org_size */}
                        <div className="row">
                           <div className="self-center md:mb-5 md:col-3">
                              <Label
                                 id="org_size"
                                 isRequired={
                                    optionalFields && optionalFields.includes('org_size')
                                       ? false
                                       : true
                                 }
                                 label={translate({ id: 'web:org_size' })}
                              />
                           </div>
                           <div className="md:col-9">
                              <Controller
                                 name="org_size"
                                 control={control}
                                 render={() => (
                                    <CustomSelect
                                       value={
                                          OrganizationSizeTypeSelect.find(
                                             item => item.value === getValues()['org_size']
                                          ) || ''
                                       }
                                       placeholder={translate({
                                          id: 'web:select_org_size',
                                       })}
                                       onChange={(value: any) => {
                                          setValue('org_size', String(value?.value), {
                                             shouldValidate: true,
                                          });
                                       }}
                                       id="org_size"
                                       options={OrganizationSizeTypeSelect}
                                       error={errors.org_size?.message}
                                    />
                                 )}
                                 rules={{
                                    // required: translate({
                                    //    id: 'validation:required',
                                    // }),
                                    required:
                                       optionalFields && optionalFields.includes('org_size')
                                          ? false
                                          : translate({ id: 'validation:required' }),
                                 }}
                              />
                           </div>
                        </div>
                        {/* industry */}
                        <div className="row">
                           <div className="self-center md:mb-5 md:col-3">
                              <Label
                                 id="industry"
                                 isRequired={
                                    optionalFields && optionalFields.includes('industry')
                                       ? false
                                       : true
                                 }
                                 label={translate({ id: 'web:industry' })}
                              />
                           </div>
                           <div className="md:col-9">
                              <Controller
                                 name="industry"
                                 control={control}
                                 render={() => (
                                    <CustomSelect
                                       value={
                                          IndustryTypeSelect.find(
                                             item => item.value === getValues()['industry']
                                          ) || ''
                                       }
                                       placeholder={translate({
                                          id: 'web:select_industry',
                                       })}
                                       onChange={(value: any) => {
                                          setValue('industry', String(value?.value), {
                                             shouldValidate: true,
                                          });
                                       }}
                                       id="industry"
                                       options={IndustryTypeSelect}
                                       error={errors.industry?.message}
                                    />
                                 )}
                                 rules={{
                                    required:
                                       optionalFields && optionalFields.includes('industry')
                                          ? false
                                          : translate({ id: 'validation:required' }),
                                 }}
                              />
                           </div>
                        </div>
                        {/* interests */}
                        {/* <div className="row">
                           <div className="self-center md:mb-5 md:col-3">
                              <Label
                                 id="interests"
                                 isRequired={
                                    optionalFields && optionalFields.includes('interests')
                                       ? false
                                       : true
                                 }
                                 label={translate({ id: 'web:interests' })}
                              />
                           </div>
                           <div className="md:col-9">
                              <Controller
                                 name="interests"
                                 control={control}
                                 render={() => (
                                    <CustomSelect
                                       value={
                                          GenericOptionsSelect.find(
                                             item => item.value === getValues()['interests']
                                          ) || ''
                                       }
                                       placeholder={translate({
                                          id: 'web:select_interests',
                                       })}
                                       onChange={(value: any) => {
                                          setValue('interests', String(value?.value), {
                                             shouldValidate: true,
                                          });
                                       }}
                                       id="interests"
                                       options={GenericOptionsSelect}
                                       error={errors.interests?.message}
                                    />
                                 )}
                                 rules={{
                                    // required: translate({
                                    //    id: 'validation:required',
                                    // }),
                                    required:
                                       optionalFields && optionalFields.includes('interests')
                                          ? false
                                          : translate({ id: 'validation:required' }),
                                 }}
                              />
                           </div>
                        </div> */}

                        {/* interests */}
                        {/* <CheckboxInput
                           label={translate({ id: 'web:interests' })}
                           isRequired
                           isInline
                           options={GenericOptionsSelect}
                           id="interests"
                           error={errors.interests?.message}
                           {...register('interests', {
                              required: translate({ id: 'validation:required' }),
                           })}
                        /> */}

                        {/* country_of_residence */}
                        <Controller
                           name="country_of_residence"
                           control={control}
                           render={() => (
                              <CountrySelect
                                 isRequired={true}
                                 selected_id={getValues()['country_of_residence']} // on edit
                                 label={translate({ id: 'web:country_of_residence' })}
                                 errors={errors.country_of_residence?.message}
                                 callBack={(item: Item) => {
                                    setValue('country_of_residence', item.value, {
                                       shouldValidate: true,
                                    });
                                    setValue('phone_code_id', item.value, {
                                       shouldValidate: true,
                                    });
                                 }}
                              />
                           )}
                           rules={{
                              required: translate({ id: 'validation:required' }),
                           }}
                        />

                        {/* city */}
                        <CustomInput
                           label={translate({ id: 'web:city' })}
                           type="text"
                           autoComplete="off"
                           // disabled={!!user && role !== 'co-team-manager'}
                           placeHolder={translate({ id: 'web:city' })}
                           id="city"
                           // isRequired
                           isInline
                           error={errors.city?.message}
                           {...register('city', {
                              required: false,
                           })}
                        />

                        {/* email */}
                        <CustomInput
                           label={translate({ id: 'web:email' })}
                           type="email"
                           // disabled={!!user && role == 'co-team-manager'}
                           isRequired
                           isInline
                           placeHolder={translate({ id: 'web:email' })}
                           id="email"
                           disabled={
                              guestEmail !== null || getValues('is_email_verified') === 'yes'
                           }
                           error={errors.email?.message}
                           {...register('email', {
                              required: translate({ id: 'validation:required' }),
                              // value: guestEmail,
                              validate: {
                                 trim: (value: any) => value == value.trim() || 'يرجى حذف المسافات',
                                 isEmail: value =>
                                    validator.isEmail(value || '') ||
                                    translate({ id: 'validation:not_email' }),
                                 isUnique: async value => {
                                    const { isUnique, status } = await isUniqueAttribute(
                                       'email',
                                       value
                                    );
                                    if (!isUnique && status === 422) {
                                       return translate({ id: 'validation:unique_email' });
                                    } else if (!isUnique) {
                                       return translate({ id: 'validation:unique_email_failed' });
                                    } else {
                                       return true;
                                    }
                                 },
                              },
                           })}
                        />

                        {/* phone */}
                        <div className="row">
                           <div className="self-center md:mb-5 md:col-3">
                              <Label id="phone" isRequired label={translate({ id: 'web:phone' })} />
                           </div>
                           <div className="md:col-9">
                              <div className="row">
                                 <div className="md:col-6">
                                    {/* phone_code */}
                                    <Controller
                                       name="phone_code_id"
                                       control={control}
                                       render={() => (
                                          <CountrySelect
                                             selected_id={getValues()['phone_code_id']} // on edit
                                             isPhoneCode={true}
                                             errors={errors.phone_code_id?.message}
                                             callBack={(item: Item) => {
                                                setValue('phone_code_id', item.value, {
                                                   shouldValidate: true,
                                                });
                                             }}
                                          />
                                       )}
                                       rules={{
                                          required: translate({ id: 'validation:required' }),
                                       }}
                                    />
                                 </div>
                                 <div className="md:col-6">
                                    <CustomInput
                                       type="text"
                                       placeHolder={
                                          IsSaudiPhoneNumberSelected(getValues('phone_code') || '')
                                             ? '50xxxxxxx'
                                             : translate({ id: 'web:phone' })
                                       }
                                       // dir="ltr"
                                       id="phone"
                                       error={errors.phone?.message}
                                       isInline={false}
                                       isRequired={true}
                                       {...register('phone', {
                                          required: translate({ id: 'validation:required' }),

                                          validate: value => {
                                             if (
                                                IsSaudiPhoneNumberSelected(
                                                   getValues('phone_code_id') || ''
                                                ) &&
                                                value &&
                                                value.length !== 9
                                             ) {
                                                return translate({
                                                   id: 'validation:invalid_phone_length',
                                                });
                                             }
                                             return true;
                                          },
                                          pattern: false || {
                                             value: /^[0-9]*$/,
                                             message: translate({
                                                id: 'validation:id_eng_numbers',
                                             }),
                                          },
                                       })}
                                    />
                                 </div>
                              </div>
                           </div>
                        </div>

                        <div className="mt-10">
                           {/* {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}

                                       callBack={() => autoFillSA()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill SA'}
                                    />
                                 </div>
                              </div>
                           )} */}
                           {/* {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}
                                       callBack={() => autoFillNotSA()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill Not Sa'}
                                    />
                                 </div>
                              </div>
                           )} */}
                           <div className="row">
                              <div className="col-6 sm:col-3 sm:offset-3">
                                 <BackBtn
                                    id="back-btn" //* for test cases
                                    // loading={loading}
                                    callBack={() => {
                                       onBackClick();
                                    }}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:back` })}`}
                                 />
                              </div>
                              <div className="col-6 sm:col-3">
                                 <SubmitBtn
                                    id="submit-btn" //* for test cases
                                    // loading={loading}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:next` })}`}
                                 />
                              </div>
                           </div>
                        </div>
                     </form>
                  </div>
               </div>
            </div>
         ) : (
            ''
         )}
         {showStepSummary
            ? // <div
              //    className={classNames(
              //       'mb-5 rounded-xl border bg-white p-5 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]'
              //    )}>
              //    <div className="flex space-x-4 rtl:space-x-reverse">
              //       <div className="my-auto">
              //          <div className="flex h-14 w-14 items-center justify-center rounded-full border border-secondary">
              //             <span className="text-xl font-bold text-secondary">1</span>
              //          </div>
              //       </div>
              //       <div className="my-auto flex-1 ">
              //          <div className="text-xl font-bold text-secondary">
              //             <Translate id="web:personal-info-1" />
              //          </div>
              //          <div className="text-sm text-primary">
              //             {getValues('first_name') + ' ' + getValues('last_name')}
              //             <span className="font-bold">,</span> {getValues('email')}
              //             <span className="font-bold">,</span>{' '}
              //             {'+' +
              //                getCountryCodeId(getValues('phone_code_id')) +
              //                '' +
              //                getValues('phone')}
              //          </div>
              //       </div>
              //       <div className="my-auto">
              //          <button
              //             onClick={() => onUpdateClick()}
              //             type="button"
              //             className="rounded border border-secondary px-2 font-medium text-secondary transition-colors duration-150 hover:bg-secondary hover:text-white">
              //             <Translate id="web:update" />
              //          </button>
              //       </div>
              //    </div>
              // </div>
              ''
            : ''}
         <Modal size="md" open={isOpen}>
            <Modal.Body>
               <div className="">
                  <div className="relative rounded-lg border bg-white p-4 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)] sm:px-10 sm:py-6">
                     <div className="">
                        <div className="row">
                           <div className="md:col-8 md:offset-2">
                              <VerifyEmailForm
                                 setIsOpen={setIsOpen}
                                 userEmail={getValues('email') || ''}
                                 callBack={(token: string) => {
                                    setValue('is_email_verified', 'yes');
                                    setValue('otp_token', token);
                                    submitForm2();
                                 }}
                              />
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </Modal.Body>
         </Modal>
      </React.Fragment>
   );
};

export default PersonalInfo;
