// import { Translate } from '~/i18n';
// import { useAuth } from '~/auth';

import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import SubmitBtn from '~/components/shared/buttons/submit-btn';
// import CheckboxInput from '~/components/shared/forms/checkbox-input';
import CustomInput from '~/components/shared/forms/custom-input';
import { Translate, useTranslate } from '~/i18n';
// import isUniqueAttribute from '~/utils/unique-attribute';
// import validator from 'validator';
import cookies from 'js-cookie';
import Axios from '~/utils/axios';
import toast from 'react-hot-toast';
import { GuestType } from '~/interfaces/guest';
// import classNames from 'classnames';
import CustomRadioInput from '~/components/shared/forms/custom-radio-input';
import { CountryType } from '~/interfaces/country';
import ButtonBtn from '~/components/shared/buttons/button-btn';
import BackBtn from '~/components/shared/buttons/back-btn';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type AccommodationInfoProps = {
   onNextClick: () => any;
   onBackClick: () => any;
   step: string | undefined;
   role?: string;
   token?: string;
   withToken: boolean;
   countries?: CountryType[];
};

const AccommodationInfo = ({
   onNextClick,
   onBackClick,
   step,
   token,
   role,
   countries,
}: AccommodationInfoProps) => {
   const { translate, lang } = useTranslate();
   const [loading, setLoading] = useState(false);
   // const { lang } = useTranslate();

   const {
      handleSubmit,
      // getValues,
      setValue,
      watch,
      register,
      formState: { errors },
   } = useFormContext<GuestType>();
   const { executeRecaptcha } = useGoogleReCaptcha();

   // values: FormData
   const submitForm = async (values: GuestType) => {
      if (loading) {
         return;
      }
      setLoading(true);
      const recaptcha = await executeRecaptcha?.();

      try {
         const data = {
            ...values,
            code: token,
            category: role,
            email: values?.email?.toLowerCase(),
            phone_code: countries?.find(item => item.id === values.phone_code_id)?.phone_code,
            recaptcha,
            // callback_url: `${process.env.NEXT_PUBLIC_BASE_URL}/${lang}/${process.env.}`,
         };

         delete data.personal_image_url;
         delete data.document_copy_url;
         delete data.visa_copy_url;

         if (data.is_saudi === 'yes') {
            delete data.birth_city;
            delete data.issue_date;
            delete data.issue_place;
            delete data.visa_copy;
            delete data.visa_status;
         }
         const response = await Axios.post(`guests?lang=${lang}`, data);
         // console.log(response.data.data);

         cookies.set('reg_num', JSON.stringify(response.data.data));
         onNextClick();
      } catch (error: any) {
         if (error.response?.status === 404) {
            toast.error(error.response?.data?.data);
         } else if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 4000,
            });
         } else {
            toast.error(translate({ id: 'res:500' }));
         }
         setLoading(false);
         // console.log(error, 'erorr');
      }
   };
   const autoFillYes = () => {
      setValue('require_accommodation', 'yes');
      setValue('special_requests', 'special requests: ...');
      setValue('dietary_requirements', 'Dietary requirements & requests ...');
      setValue('require_transfer', 'yes');
      // setValue('full_name_on_document', 'full name');
   };

   return (
      <React.Fragment>
         {step == 'accommodation-info' && (
            <div className="rounded-lg border bg-white shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
               <div className="p-6 sm:p-12">
                  <h2 className=" text-xl font-bold capitalize text-primary md:mb-4 md:text-2xl">
                     <Translate id="web:accommodation-info" />
                  </h2>
                  <div className="pt-5">
                     <form
                        noValidate
                        onSubmit={handleSubmit(submitForm)}
                        className="relative"
                        autoComplete="off">
                        <div>
                           {/* require_accommodation */}
                           <CustomRadioInput
                              label={translate({ id: 'web:require_accommodation' })}
                              isRequired
                              isInline
                              options={[
                                 { value: 'yes', label: translate({ id: 'web:yes' }) },
                                 { value: 'no', label: translate({ id: 'web:no' }) },
                              ]}
                              id="require_accommodation"
                              error={errors.require_accommodation?.message}
                              {...register('require_accommodation', {
                                 required: translate({ id: 'validation:required' }),
                              })}
                           />
                           {watch('require_accommodation') !== null ? (
                              watch('require_accommodation') === 'yes' ? (
                                 <React.Fragment>
                                    {/* special_requests */}
                                    <CustomInput
                                       label={translate({ id: 'web:special_requests' })}
                                       type="textarea"
                                       rows={3}
                                       // isRequired
                                       isInline
                                       // disabled={!!user && role !== 'co-team-manager'}
                                       autoComplete="off"
                                       placeHolder={translate({
                                          id: 'web:special_requests',
                                       })}
                                       id="special_requests"
                                       error={errors.special_requests?.message}
                                       {...register('special_requests', {
                                          required: false,
                                          maxLength: {
                                             value: 500,
                                             message: translate({
                                                id: 'validation:you_reached_the_text_limit',
                                             }),
                                          },
                                       })}
                                    />
                                    {/* dietary_requirements */}
                                    <CustomInput
                                       label={translate({
                                          id: 'web:dietary_requirements',
                                       })}
                                       type="textarea"
                                       rows={3}
                                       // isRequired
                                       isInline
                                       // disabled={!!user && role !== 'co-team-manager'}
                                       autoComplete="off"
                                       placeHolder={translate({
                                          id: 'web:dietary_requirements',
                                       })}
                                       id="dietary_requirements"
                                       error={errors.dietary_requirements?.message}
                                       {...register('dietary_requirements', {
                                          required: false,
                                          maxLength: {
                                             value: 500,
                                             message: translate({
                                                id: 'validation:you_reached_the_text_limit',
                                             }),
                                          },
                                       })}
                                    />
                                 </React.Fragment>
                              ) : (
                                 ''
                              )
                           ) : (
                              ''
                           )}
                           <hr className="my-5 border-primary" />

                           <h2 className=" text-xl font-bold capitalize text-primary md:mb-4 md:text-2xl">
                              <Translate id="web:transportation" />
                           </h2>
                           <p>
                              <Translate id="web:transportation_note" />
                           </p>
                           <div className="mt-4">
                              {/* require_transfer */}
                              <CustomRadioInput
                                 label={translate({ id: 'web:require_transfer' })}
                                 isRequired
                                 isInline
                                 options={[
                                    { value: 'yes', label: translate({ id: 'web:yes' }) },
                                    { value: 'no', label: translate({ id: 'web:no' }) },
                                 ]}
                                 id="require_transfer"
                                 error={errors.require_transfer?.message}
                                 {...register('require_transfer', {
                                    required: translate({ id: 'validation:required' }),
                                 })}
                              />
                           </div>
                        </div>
                        <div className="mt-10">
                           {process.env.NEXT_PUBLIC_ENV === 'local' && (
                              <div className="row pb-4">
                                 <div className="sm:col-6 sm:offset-3">
                                    <ButtonBtn
                                       // disable={image === undefined ? true : false}
                                       callBack={() => autoFillYes()}
                                       id="upload-btn"
                                       // loading={loading}
                                       text={'auto fill yes '}
                                    />
                                 </div>
                              </div>
                           )}
                           <div className="row">
                              <div className="col-6 sm:col-3 sm:offset-3">
                                 <BackBtn
                                    id="back-btn" //* for test cases
                                    // loading={loading}
                                    callBack={() => {
                                       onBackClick();
                                    }}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:back` })}`}
                                 />
                              </div>
                              <div className="col-6 sm:col-3">
                                 <SubmitBtn
                                    id="submit-btn" //* for test cases
                                    loading={loading}
                                    className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:submit` })}`}
                                 />
                              </div>
                           </div>
                        </div>
                     </form>
                  </div>
               </div>
            </div>
         )}
      </React.Fragment>
   );
};

export default AccommodationInfo;
