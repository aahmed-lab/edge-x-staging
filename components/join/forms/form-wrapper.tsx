// import { ChevronRightIcon } from '@heroicons/react/24/outline';
import { useRouter } from 'next/router';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { Translate, useTranslate } from '~/i18n';
import cookie from 'js-cookie';
import PersonalInfo from './steps/personal-info-1';
import PersonalInfo2 from './steps/personal-info-2';
import { getStepsList } from '~/utils/getStepsList';
import dynamic from 'next/dynamic';
import { useMediaQuery } from 'react-responsive';
// import scrollToElement from 'scroll-to-element';
// import { ChevronLeftIcon } from '@heroicons/react/20/solid';
// import VaccinationInfo from './steps/vaccination-info';
import FlightsInfo from './steps/flights-info';
import AccommodationInfo from './steps/accommodation-info';
import Axios from '~/utils/axios';
import { CountryType } from '~/interfaces/country';
import classNames from 'classnames';

const MenuSteps = dynamic(() => import('./menu-steps'), { ssr: false });
const MenuStepsMd = dynamic(() => import('./menu-steps-md'), { ssr: false });

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/

type JoinFormWrapperProps = {
   category: string;
   token?: string;
   // withToken: boolean;

   guestEmail?: string | null;
   guestFirstName?: string | null;
   guestLastName?: string | null;
   steps_number: number;
   optionalFields?: string[];
   visaStatusTypes?: string[];
   withOtp: boolean;
};

const JoinFormWrapper = ({
   category,
   token,
   // withToken,
   guestEmail,
   guestFirstName,
   guestLastName,
   steps_number,
   optionalFields,
   visaStatusTypes,
   withOtp,
}: JoinFormWrapperProps) => {
   const router = useRouter();
   const { lang } = useTranslate();

   const userData = cookie.get('user_data') && JSON.parse(cookie.get('user_data') as any);
   const formWrapperRef = useRef<any>(null);

   const steps = getStepsList(category, steps_number);
   const userEmptyObj = {
      //! step
      gender: null,
      title: null,
      first_name: guestFirstName || null,
      last_name: guestLastName || null,
      company: null,
      position_id: null,
      job_title: null,
      country_of_residence: null,
      city: null,
      email: guestEmail || null,
      phone_code: null,
      phone_code_id: null,
      phone: null,
      //extra
      org_size: null,
      industry: null,
      interests: null,
      industry_other: null,
      //! step
      is_saudi: null,
      visa_status: null,
      document_type: null,
      document_number: null,
      passport_type: null,
      saudi_embassy_city: null,
      issue_date: null,
      issue_place: null,
      expiration_date: null,
      full_name_on_document: null,
      birth_date: null,
      birth_city: null,
      nationality: null,
      religion: null,
      personal_image: null,
      personal_image_url: null,
      document_copy: null,
      document_copy_url: null,
      visa_copy: null,
      visa_copy_url: null,
      //! step
      // vaccination_certificate: null,
      // vaccination_certificate_url: null,
      // first_vaccination_type: null,
      // first_vaccination_date: null,
      // second_vaccination_type: null,
      // second_vaccination_date: null,
      // third_vaccination_type: null,
      // third_vaccination_date: null,

      //! step
      require_flights: null,
      departure_city_to: null,
      destination_to: null,
      expected_date_of_arrival: null,
      specific_requirements_to: null,
      departure_city_from: null,
      destination_from: null,
      expected_date_of_departure: null,
      specific_requirements_from: null,
      comments: null,
      //! step
      require_accommodation: null,
      special_requests: null,
      dietary_requirements: null,

      require_transfer: null,
      is_email_verified: null,
      otp_token: null,

      // other
      step: (steps && steps[0]) || null,
   };

   const [step, setStep] = useState('');
   const role = category;
   // console.log(token, 'token');

   const [countriesList, setCountriesList] = useState<CountryType[]>([]);

   useEffect(() => {
      const fetchData = async () => {
         try {
            const response = await Axios.get(`/countries-select?lang=${lang}`);
            setCountriesList(response.data.data);
         } catch (error: any) {
            console.log(error.response);
         }
      };
      fetchData();
   }, [lang]);

   useEffect(() => {
      if (userData) {
         setStep(userData?.step ? userData?.step : steps?.[0]);
      } else {
         if (role) {
            setStep('personal-info-1');
         }
      }
   }, [role, steps, userData]);

   const methods = useForm({
      mode: 'onChange',
      defaultValues:
         (cookie.get('user_data') && JSON.parse(cookie.get('user_data') as any)) || userEmptyObj,
   });

   const updateStep = useCallback((step: string) => {
      const userData = cookie.get('user_data');
      if (userData) {
         const userObject = JSON.parse(userData);
         const updatedUserObj = {
            ...userObject,
            step: step,
         };
         cookie.set('user_data', JSON.stringify(updatedUserObj));
      }

      setStep(step);
   }, []);

   //! this wasn't working with Safari
   // useEffect(() => {
   //     formWrapperRef?.current?.scrollIntoView(true);
   // }, [step]);

   // useEffect(() => {
   //    if (step)
   //       scrollToElement('#formWrapper', {
   //          offset: 0,
   //          ease: 'out-bounce',
   //          duration: 100,
   //       });
   // }, [step]);

   const renderSteps = (role: any) => {
      // role slug
      if (role && steps_number === 4) {
         return (
            <React.Fragment>
               {/* personal-info-1 */}
               <PersonalInfo
                  step={step}
                  nextStep={'personal-info-2'}
                  showStepSummary={
                     step !== 'personal-info-1' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('personal-info-1')
                  }
                  onBackClick={() => router.push(`/${lang}`)}
                  onUpdateClick={() => updateStep('personal-info-1')}
                  onNextClick={() => setStep('personal-info-2')}
                  countries={countriesList}
                  guestEmail={guestEmail}
                  guestFirstName={guestFirstName}
                  guestLastName={guestLastName}
                  optionalFields={optionalFields}
                  role={role}
                  withOtp={withOtp}
               />
               {/* personal-info-2 */}
               <PersonalInfo2
                  step={step}
                  nextStep={'flights-info'}
                  showStepSummary={
                     step !== 'personal-info-2' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('personal-info-2')
                  }
                  stepsNumber={steps_number}
                  onBackClick={() => updateStep('personal-info-1')}
                  onUpdateClick={() => updateStep('personal-info-2')}
                  onNextClick={() => setStep('flights-info')}
                  countries={countriesList}
                  optionalFields={optionalFields}
                  visaStatusTypes={visaStatusTypes}
                  role={role}
               />

               {/* flights-info */}
               <FlightsInfo
                  step={step}
                  nextStep={'accommodation-info'}
                  showStepSummary={
                     step !== 'flights-info' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('flights-info')
                  }
                  onBackClick={() => updateStep('personal-info-2')}
                  onUpdateClick={() => updateStep('flights-info')}
                  onNextClick={() => setStep('accommodation-info')}
               />
               {/* SignUp info */}
               <AccommodationInfo
                  token={token}
                  role={role}
                  withToken
                  step={step}
                  onBackClick={() => updateStep('flights-info')}
                  onNextClick={() => router.push(`/${lang}/join/${category}/success`)}
                  countries={countriesList}
               />
            </React.Fragment>
         );
      } else if (role && steps_number === 2) {
         return (
            <React.Fragment>
               {/* personal-info-1 */}
               <PersonalInfo
                  step={step}
                  nextStep={'personal-info-2'}
                  showStepSummary={
                     step !== 'personal-info-1' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('personal-info-1')
                  }
                  onNextClick={() => setStep('personal-info-2')}
                  onBackClick={() => router.push(`/${lang}`)}
                  onUpdateClick={() => updateStep('personal-info-1')}
                  countries={countriesList}
                  guestEmail={guestEmail}
                  guestFirstName={guestFirstName}
                  guestLastName={guestLastName}
                  optionalFields={optionalFields}
                  role={role}
                  withOtp={withOtp}
               />
               {/* personal-info-2 */}
               <PersonalInfo2
                  step={step}
                  nextStep={'flights-info'}
                  showStepSummary={
                     step !== 'personal-info-2' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('personal-info-2')
                  }
                  stepsNumber={steps_number}
                  token={token}
                  role={role}
                  onBackClick={() => updateStep('personal-info-1')}
                  onUpdateClick={() => updateStep('personal-info-2')}
                  onNextClick={() => router.push(`/${lang}/join/${category}/success`)}
                  countries={countriesList}
                  optionalFields={optionalFields}
                  visaStatusTypes={visaStatusTypes}
               />
               {/* // todo */}
               {/* vaccination-info */}
               {/* <VaccinationInfo
                  countries={countriesList}
                  step={step}
                  nextStep={'flights-info'}
                  token={token}
                  stepsNumber={steps_number}
                  role={role}
                  showStepSummary={
                     step !== 'vaccination-info' &&
                     steps &&
                     steps.indexOf(step) > steps.indexOf('vaccination-info')
                  }
                  onBackClick={() => updateStep('personal-info-2')}
                  onUpdateClick={() => updateStep('vaccination-info')}
                  onNextClick={() => router.push(`/${lang}/join/${category}/${token}/success`)}
               /> */}
            </React.Fragment>
         );
      }
   };

   const isWidthLessThan768px = useMediaQuery({
      query: '(max-device-width: 768px)', //tailwind md => (768px)
   });
   return (
      <React.Fragment>
         <section className="min-h-full bg-cover bg-center bg-no-repeat">
            {/* <div className="absolute hidden w-full  overflow-hidden lg:block">
               <div className="bg-top-left relative  -z-10   -ml-16 h-[350px] bg-bubble-left bg-contain bg-no-repeat"></div>
            </div>
            <div className="absolute bottom-0  hidden w-full overflow-hidden  lg:block">
               <div className="relative -z-10 -mr-16 h-[450px] bg-circle-right-2 bg-contain bg-right-bottom bg-no-repeat"></div>
            </div> */}
            <div className="container relative">
               <div className="row">
                  <div className="lg:col-8 lg:offset-2 xl:col-8 xl:offset-2">
                     {/* <div>
                        <div
                           onClick={() => {
                              if (step == steps?.[0]) {
                                 router.push(`/${lang}`);
                              } else {
                                 steps && updateStep(steps?.[steps.indexOf(step) - 1]);
                              }
                           }}
                           className="flex cursor-pointer space-x-2 rtl:space-x-reverse">
                           <span className="my-auto">
                              {lang === 'en' ? (
                                 <ChevronLeftIcon className="h-5 w-5" />
                              ) : (
                                 <ChevronRightIcon className="h-5 w-5" />
                              )}
                           </span>
                           <span className="my-auto">
                              <Translate id="web:back" />
                           </span>
                        </div>
                     </div> */}
                     <div className="col-12 text-center">
                        <h1
                           className={classNames(
                              'text-2xl font-black',
                              // 'bg-clip-text text-transparent',
                              // 'ltr:bg-gradient-to-r rtl:bg-gradient-to-l',
                              // 'from-[#55A6D9] via-[#55A6D9] to-[#55A6D9]',
                              'text-white'
                           )}>
                           <Translate id="web:register_your_attendance" />
                        </h1>
                        {/* <p className="mt-3 text-gray-300">
                           <Translate id="web:join_as" /> "{getCategory(category)}"
                        </p> */}
                     </div>

                     {isWidthLessThan768px ? (
                        <MenuStepsMd steps={steps} step={step} />
                     ) : (
                        <MenuSteps steps={steps} step={step} />
                     )}
                     <div id="formWrapper" ref={formWrapperRef}>
                        <FormProvider {...methods}>{renderSteps(category)}</FormProvider>
                     </div>
                  </div>
               </div>
            </div>
         </section>
         {/* <style jsx global>{`
            main > div {
               height: 100%;
            }
            main > div > div {
               height: 100%;
            }
         `}</style> */}
      </React.Fragment>
   );
};

export default JoinFormWrapper;
