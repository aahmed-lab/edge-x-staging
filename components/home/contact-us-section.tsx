import { Translate, useTranslate } from '~/i18n';
// import { useAuth } from '~/auth';
// import classNames from 'classnames';
import { Icon } from '@iconify/react';
import CustomInput from '../shared/forms/custom-input';
import { useState } from 'react';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';
import { useForm } from 'react-hook-form';
import Axios from '~/utils/axios';
import toast from 'react-hot-toast';
import SubmitBtn from '../shared/buttons/submit-btn';
import validator from 'validator';
/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/
type FormData = {
   company_name: string | null;
   contact_person: string | null;
   phone: string | null;
   country: string | null;
   job_title: string | null;

   email: string | null;

   recaptcha: string | null;
};
const ContactUsSection = () => {
   const { translate, lang } = useTranslate();
   const [loading, setLoading] = useState(false);
   const { executeRecaptcha } = useGoogleReCaptcha();
   const {
      register,
      handleSubmit,
      reset,
      // getValues,
      // watch,
      setError,
      formState: { errors },
   } = useForm<FormData>({
      defaultValues: {
         company_name: null,
         contact_person: null,
         phone: null,
         country: null,
         job_title: null,
         email: null,
         recaptcha: null,
      },
   });

   const submitForm = async (values: FormData) => {
      if (loading) {
         return;
      }
      // console.log(values, 'values');

      setLoading(true);
      const recaptcha = await executeRecaptcha?.();
      const data = {
         ...values,
         ...{
            email: values.email?.toLocaleLowerCase(),
            recaptcha,
         },
      };
      // console.log(data, 'data');
      await new Promise(resolve => setTimeout(resolve, 2000));

      try {
         await Axios.post(`/contact-us?lang=${lang}`, data);
         reset({
            company_name: null,
            contact_person: null,
            phone: null,
            country: null,
            job_title: null,

            email: null,

            recaptcha: null,
         });
         toast.success(translate({ id: 'res:message_sent' }));
      } catch (error: any) {
         if (error.response && error.response.status === 422) {
            const responseErrors = error?.response?.data?.data;
            Object.keys(responseErrors).map(key => {
               setError(key as any, {
                  message: responseErrors[key][0],
               });
            });
         }
         if (error?.response?.status === 403) {
            toast.error(translate({ id: 'res:recaptcha_failed' }), {
               duration: 4000,
            });
         } else {
            toast.error(translate({ id: 'res:500' }), {
               duration: 4000,
            });
         }
      }

      setLoading(false);
   };
   return (
      <div className="bg-[#f4f4f4]" id="contact-us">
         <section className="container py-10">
            <div className="row">
               <div className="xl:col-10 xl:offset-1">
                  <div className="row">
                     <div className="md:col-12">
                        <h2 className="mb-8 text-2xl font-semibold">
                           <Translate id={'web:register_interest'} />
                        </h2>
                        {/* <p className="mt-3 mb-8">{'<<Content to be added here>>'}</p> */}
                        <div>
                           <form
                              noValidate
                              onSubmit={handleSubmit(submitForm)}
                              className="relative"
                              // autoComplete="password"
                           >
                              <div className="row">
                                 <div className="md:col-6">
                                    <div className="ltr:md:pr-10 rtl:md:pl-10">
                                       {/* company_name */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:company_name' })}
                                          type="text"
                                          // autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="company_name"
                                          error={errors.company_name?.message}
                                          {...register('company_name', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                return true;
                                             },
                                          })}
                                       />

                                       {/* contact_person */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:contact_person' })}
                                          type="text"
                                          // autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="contact_person"
                                          error={errors.contact_person?.message}
                                          {...register('contact_person', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                return true;
                                             },
                                          })}
                                       />
                                       {/* country */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:country' })}
                                          type="text"
                                          // autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="country"
                                          error={errors.country?.message}
                                          {...register('country', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                return true;
                                             },
                                          })}
                                       />
                                    </div>
                                 </div>
                                 <div className="md:col-6">
                                    <div className="ltr:md:pl-10 rtl:md:pr-10">
                                       {/* email */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:email' })}
                                          type="text"
                                          // autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="f-email"
                                          error={errors.email?.message}
                                          {...register('email', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                if (value && !validator.isEmail(value)) {
                                                   return translate({ id: 'validation:not_email' });
                                                }
                                                return true;
                                             },
                                          })}
                                       />
                                       {/* phone */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:phone' })}
                                          type="text"
                                          // autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="phone"
                                          error={errors.phone?.message}
                                          {...register('phone', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                return true;
                                             },
                                          })}
                                       />

                                       {/* job_title */}
                                       <CustomInput
                                          isInline={false}
                                          label={translate({ id: 'web:job_title' })}
                                          type="text"
                                          autoComplete="password"
                                          placeHolder={translate({ id: 'web:type_here' })}
                                          id="job_title"
                                          error={errors.job_title?.message}
                                          {...register('job_title', {
                                             required: translate({ id: 'validation:required' }),
                                             validate: value => {
                                                if (value && value.length > 250) {
                                                   return translate({
                                                      id: 'validation:text_limit',
                                                   });
                                                }
                                                return true;
                                             },
                                          })}
                                       />
                                    </div>
                                 </div>
                              </div>

                              <div className="mt-5">
                                 <SubmitBtn
                                    icon={
                                       <span className="text-white">
                                          <Icon
                                             icon="heroicons:chevron-double-right-16-solid"
                                             className="h-[30px] w-[30px]"
                                          />
                                       </span>
                                    }
                                    id="submit-btn" //* for test cases
                                    loading={loading}
                                    // className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                    text={`${translate({ id: `web:submit` })}`}
                                 />
                              </div>
                           </form>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </section>
      </div>
   );
};

export default ContactUsSection;
