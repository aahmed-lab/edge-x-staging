import { Translate, useTranslate } from '~/i18n';
import classNames from 'classnames';
import { Controller, useForm } from 'react-hook-form';
// import CustomMultiSelect from '../shared/forms/custom-multi-select';
import { GuestType } from '~/interfaces/guest';
import { toast } from 'react-hot-toast';
import React, { useState } from 'react';
// import BackBtn from '../shared/buttons/back-btn';
import SubmitBtn from '../shared/buttons/submit-btn';
import { useGoogleReCaptcha } from 'react-google-recaptcha-v3';
import Axios from '~/utils/axios';
import { useRouter } from 'next/router';
import CustomFileInput3 from '../shared/forms/custom-file-input-2/custom-file-input-3';
import CustomFileInput2 from '../shared/forms/custom-file-input-2/custom-file-input';
import { ArrowTopRightOnSquareIcon, XMarkIcon } from '@heroicons/react/20/solid';
import Modal from '../shared/modals';

/******************************************************************
 *
 *  THIS COMPONENT WAS GENERATED BY NEXTCRAZY-CLI
 *
 ******************************************************************/
interface MissingDataSectionsProps {
   token: string;
   personal_image: string | null;
   document_copy: string | null;
   gender: string | null;
   document_type: string | null;
}
const MissingDataSections = ({
   token,
   personal_image,
   document_copy,
   gender,
   document_type,
}: MissingDataSectionsProps) => {
   const { translate, lang } = useTranslate();
   const [loading, setLoading] = useState(false);
   const router = useRouter();
   const {
      handleSubmit,
      getValues,
      control,
      setValue,
      formState: { errors },
   } = useForm<GuestType>({
      defaultValues: {
         personal_image: personal_image || null,
         document_copy: document_copy || null,
         document_copy_url: null,
         personal_image_url: null,
         gender: gender || null,
         document_type: document_type || null,
      },
   });
   console.log('personal_image', personal_image);
   console.log('document_copy', document_copy);
   const [isPersonalImageNotSet] = useState(
      personal_image === null || personal_image === '' ? true : false
   );
   const [isDocumentCopyNotSet] = useState(
      document_copy == null || document_copy === '' ? true : false
   );
   // const [loading, setLoading] = useState('');

   const { executeRecaptcha } = useGoogleReCaptcha();
   const [isOpen, setIsOpen] = useState(false);
   // const [isOpen2, setIsOpen2] = useState(false);

   const submitForm = async (values: GuestType) => {
      if (loading) {
         return;
      }
      setLoading(true);
      const recaptcha = await executeRecaptcha?.();
      //test
      try {
         const data = {
            ...values,
            token: token,
            recaptcha: recaptcha,
            personal_image: values?.personal_image,
            document_copy: values?.document_copy,
         };

         await Axios.post(`complete-data?lang=${lang}`, data);
         router.push(`/`);
         toast.success(translate({ id: 'res:data_saved' }));
      } catch (error: any) {
         toast.error(translate({ id: 'res:500' }));
         setLoading(false);
         // console.log(error, 'erorr');
      }
      setLoading(false);
   };
   const getImgPlaceHolder = () => {
      switch (getValues('gender')) {
         case 'male':
            return '/images/man_dark.png';
         case 'female':
            return '/images/woman_dark.png';
         default:
            return '/images/man_dark.png';
      }
   };
   return (
      <React.Fragment>
         <div className="container relative py-10">
            <div className="row">
               <div className="lg:col-8 lg:offset-2 xl:col-8 xl:offset-2">
                  <div className="rounded-lg border bg-white shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)]">
                     <div className="p-6 sm:p-12">
                        <h2
                           className={classNames(
                              'text-xl font-bold text-gray-800 md:mb-4 md:text-2xl'
                           )}>
                           {/* todo */}
                           Required Information to Complete Your Registration
                        </h2>
                        {/* todo */}
                        <p className="mt-2 text-gray-600">
                           To complete your registration, please provide the following:
                        </p>
                        <ul className="mt-2 list-disc pl-5 text-gray-600">
                           {isPersonalImageNotSet && <li>Personal Photo</li>}
                           {isDocumentCopyNotSet && <li>Document Copy</li>}
                        </ul>
                        <p className="mt-2 text-gray-600">
                           Please note that{' '}
                           <strong>
                              <em>this link is one-time use only</em>
                           </strong>
                           . If you have any questions or need assistance, feel free to reach out to
                           our support team.
                        </p>
                        <div className="pt-5">
                           <form
                              noValidate
                              onSubmit={handleSubmit(submitForm)}
                              className="relative"
                              autoComplete="off">
                              {/* missing datta */}
                              <div>
                                 {isPersonalImageNotSet && (
                                    <React.Fragment>
                                       {/* personal_image */}
                                       <Controller
                                          name="personal_image"
                                          control={control}
                                          render={({ field: { ref } }) => (
                                             <CustomFileInput2
                                                label={translate({ id: 'web:personal_image' })}
                                                id="personal_image"
                                                isRequired={true}
                                                error={
                                                   errors.personal_image?.message ||
                                                   errors.personal_image?.message
                                                }
                                                ref={ref}
                                                inputName="personal_image"
                                                withCrop
                                                note={
                                                   <React.Fragment>
                                                      <span className="block text-center text-sm text-black">
                                                         <Translate id="web:upload_document_p" />
                                                      </span>
                                                   </React.Fragment>
                                                }
                                                placeholderImg={
                                                   <div className="relative mx-auto h-32 w-32 rounded-full">
                                                      {getValues()['personal_image_url'] && (
                                                         <div
                                                            onClick={() => {
                                                               setValue('personal_image', null, {
                                                                  shouldValidate: true,
                                                               });
                                                               setValue(
                                                                  'personal_image_url',
                                                                  null,
                                                                  {
                                                                     shouldValidate: true,
                                                                  }
                                                               );
                                                               const el = document.getElementById(
                                                                  'personal_image'
                                                               ) as HTMLInputElement;

                                                               if (el) {
                                                                  el.value = '';
                                                               }
                                                            }}
                                                            className="absolute top-1 flex h-6 w-6  cursor-pointer items-center justify-center rounded-full border border-black bg-white text-black ltr:right-1 rtl:left-1">
                                                            <XMarkIcon className="h-4 w-4" />
                                                         </div>
                                                      )}
                                                      <img
                                                         src={
                                                            getValues()['personal_image_url'] ||
                                                            getImgPlaceHolder()
                                                         }
                                                         className="rounded-full border border-primary object-cover"
                                                         // alt=""
                                                      />
                                                   </div>
                                                }
                                                help={
                                                   <React.Fragment>
                                                      <span className="block text-center text-sm text-black">
                                                         <Translate id="web:only_jpg_png" />
                                                      </span>
                                                   </React.Fragment>
                                                }
                                                callBack={(
                                                   id?: string | null,
                                                   url?: string | null
                                                ) => {
                                                   setValue('personal_image', id || null, {
                                                      shouldValidate: true,
                                                   });
                                                   // console.log(url);

                                                   setValue('personal_image_url', url || null, {
                                                      shouldValidate: true,
                                                   });
                                                }}
                                             />
                                          )}
                                          rules={{
                                             // required: translate({ id: 'validation:required' }),
                                             required: translate({ id: 'validation:required' }),
                                          }}
                                       />
                                    </React.Fragment>
                                 )}

                                 {isDocumentCopyNotSet && (
                                    <React.Fragment>
                                       {/* document_copy */}
                                       <Controller
                                          name="document_copy"
                                          control={control}
                                          render={({ field: { ref } }) => (
                                             <CustomFileInput3
                                                label={translate({
                                                   id: 'web:document_copy',
                                                   values: {
                                                      id: getValues('document_type')
                                                         ? translate({
                                                              id: `web:${getValues(
                                                                 'document_type'
                                                              )}`,
                                                           })
                                                         : translate({ id: 'web:id' }),
                                                   },
                                                })}
                                                id="document_copy"
                                                isRequired={true}
                                                // isInline
                                                error={
                                                   errors.document_copy?.message ||
                                                   errors.document_copy?.message
                                                }
                                                ref={ref}
                                                inputName="document_copy"
                                                help={
                                                   <React.Fragment>
                                                      <span className="block text-center text-sm text-black">
                                                         <Translate id="web:only_jpg_png" />
                                                      </span>
                                                   </React.Fragment>
                                                }
                                                placeholderImg={
                                                   getValues()['document_copy_url'] !== null && (
                                                      <div className="flex h-[38px] items-center justify-center space-x-2 rtl:space-x-reverse">
                                                         <div>
                                                            <button
                                                               type="button"
                                                               onClick={() => setIsOpen(true)}
                                                               className="flex items-center space-x-1 rounded-full  border border-secondary p-0 px-2   text-secondary hover:border-secondary-600 hover:text-secondary-600 rtl:space-x-reverse">
                                                               <span>
                                                                  <Translate id="web:view_file" />
                                                               </span>
                                                               <span>
                                                                  <ArrowTopRightOnSquareIcon className="h-3 w-3" />
                                                               </span>
                                                            </button>
                                                         </div>
                                                         <div
                                                            onClick={() => {
                                                               setValue('document_copy', null, {
                                                                  shouldValidate: true,
                                                               });
                                                               setValue('document_copy_url', null, {
                                                                  shouldValidate: true,
                                                               });
                                                               const el = document.getElementById(
                                                                  'document_copy'
                                                               ) as HTMLInputElement;

                                                               if (el) {
                                                                  el.value = '';
                                                               }
                                                            }}
                                                            className="flex cursor-pointer items-center justify-center rounded-full bg-red-500 px-2   text-white hover:bg-red-600">
                                                            <Translate id="web:delete" />
                                                         </div>
                                                      </div>
                                                   )
                                                }
                                                callBack={(
                                                   id?: string | null,
                                                   url?: string | null
                                                ) => {
                                                   setValue('document_copy', id || null, {
                                                      shouldValidate: true,
                                                   });
                                                   setValue('document_copy_url', url || null, {
                                                      shouldValidate: true,
                                                   });
                                                }}
                                             />
                                          )}
                                          rules={{
                                             required: translate({ id: 'validation:required' }),
                                          }}
                                       />
                                    </React.Fragment>
                                 )}
                              </div>
                              <div className="row">
                                 <div className="col-6 sm:col-3 sm:offset-6"></div>
                                 <div className="col-6 sm:col-3">
                                    <SubmitBtn
                                       id="submit-btn" //* for test cases
                                       loading={loading}
                                       className="w-full overflow-hidden rounded-md bg-secondary p-3"
                                       text={`${translate({ id: `web:submit` })}`}
                                    />
                                 </div>
                              </div>
                           </form>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <Modal size="md" open={isOpen}>
            <Modal.Body>
               <div className="">
                  <div className="relative rounded-lg border bg-white p-4 shadow-[0px_7px_29px_0px_rgba(100,100,111,0.2)] sm:px-10 sm:py-6">
                     <div className="">
                        <div className="row">
                           <div className="md:col-8 md:offset-2">
                              <div className="">
                                 <img
                                    src={getValues()['document_copy_url'] || ''}
                                    className="border border-primary object-cover"
                                    // alt=""
                                 />
                              </div>
                           </div>
                        </div>
                        <div className="row mt-5">
                           <div className="md:col-6 md:offset-3">
                              <button
                                 type="button"
                                 className={classNames(
                                    ' block w-full  border border-gray-500 px-4 py-[11px] text-center text-sm font-medium leading-5 text-gray-500 transition-colors duration-150  focus:outline-none focus:ring  focus:ring-opacity-50  ',
                                    'disabled:cursor-not-allowed disabled:opacity-50 ',
                                    'enabled:focus:ring-accent enabled:focus:ring-opacity-50 '
                                 )}
                                 onClick={() => {
                                    setIsOpen(false);
                                 }}>
                                 <Translate id="web:no_cancel" />
                              </button>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </Modal.Body>
         </Modal>
      </React.Fragment>
   );
};

export default MissingDataSections;
